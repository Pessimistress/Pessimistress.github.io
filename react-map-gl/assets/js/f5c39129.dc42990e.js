"use strict";(self.webpackChunkreact_map_gl_website=self.webpackChunkreact_map_gl_website||[]).push([[5109],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>h});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(o),m=a,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return o?n.createElement(h,l(l({ref:t},s),{},{components:o})):n.createElement(h,l({ref:t},s))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,l=new Array(r);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=o[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},4696:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=o(7462),a=o(3366),r=(o(7294),o(3905)),l=["components"],i={},c="GeolocateControl",p={unversionedId:"api-reference/geolocate-control",id:"api-reference/geolocate-control",title:"GeolocateControl",description:"React component that wraps GeolocateControl.",source:"@site/../docs/api-reference/geolocate-control.md",sourceDirName:"api-reference",slug:"/api-reference/geolocate-control",permalink:"/react-map-gl/docs/api-reference/geolocate-control",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/geolocate-control.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"FullscreenControl",permalink:"/react-map-gl/docs/api-reference/fullscreen-control"},next:{title:"Layer",permalink:"/react-map-gl/docs/api-reference/layer"}},s={},d=[{value:"Methods",id:"methods",level:2},{value:"<code>trigger()</code>: boolean",id:"trigger",level:4},{value:"Properties",id:"properties",level:2},{value:"Tracking options",id:"tracking-options",level:3},{value:"<code>positionOptions</code>: PositionOptions",id:"positionoptions",level:4},{value:"<code>trackUserLocation</code>: boolean",id:"trackuserlocation",level:4},{value:"Render options",id:"render-options",level:3},{value:"<code>fitBoundsOptions</code>: FitBoundsOptions",id:"fitboundsoptions",level:4},{value:"<code>position</code>: &#39;top-right&#39; | &#39;top-left&#39; | &#39;bottom-right&#39; | &#39;bottom-left&#39;",id:"position",level:4},{value:"<code>style</code>: CSSProperties",id:"style",level:4},{value:"<code>showAccuracyCircle</code>: boolean",id:"showaccuracycircle",level:4},{value:"<code>showUserHeading</code>: boolean",id:"showuserheading",level:4},{value:"<code>showUserLocation</code>: boolean",id:"showuserlocation",level:4},{value:"Callbacks",id:"callbacks",level:3},{value:"<code>onGeolocate</code>: (evt: GeolocateResultEvent) =&gt; void",id:"ongeolocate",level:4},{value:"<code>onError</code>: (evt: GeolocateErrorEvent) =&gt; void",id:"onerror",level:4},{value:"<code>onOutOfMaxBounds</code>: (evt: GeolocateResultEvent) =&gt; void",id:"onoutofmaxbounds",level:4},{value:"<code>onTrackUserLocationStart</code>: (evt: GeolocateEvent) =&gt; void",id:"ontrackuserlocationstart",level:4},{value:"<code>onTrackUserLocationEnd</code>: (evt: GeolocateEvent) =&gt; void",id:"ontrackuserlocationend",level:4},{value:"Source",id:"source",level:2}],u={toc:d},m="wrapper";function h(e){var t=e.components,o=(0,a.Z)(e,l);return(0,r.kt)(m,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"geolocatecontrol"},"GeolocateControl"),(0,r.kt)("p",null,"React component that wraps ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/api/markers/#geolocateControl"},"GeolocateControl"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport Map, {GeolocateControl} from 'react-map-gl';\n\nfunction App() {\n  return <Map\n    mapLib={import('mapbox-gl')}\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <GeolocateControl />\n  </Map>;\n}\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Imperative methods are accessible via a ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/refs-and-the-dom.html#creating-refs"},"React ref")," hook:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport Map, {GeolocateControl} from 'react-map-gl';\n\nfunction App() {\n  const geolocateControlRef = React.useCallback((ref) => {\n    if (ref) {\n      // Activate as soon as the control is loaded\n      ref.trigger();\n    }\n  }, []);\n\n  return <Map><GeolocateControl ref={geolocateControlRef} /></Map>;\n}\n")),(0,r.kt)("h4",{id:"trigger"},(0,r.kt)("inlineCode",{parentName:"h4"},"trigger()"),": boolean"),(0,r.kt)("p",null,"Trigger a geolocation event."),(0,r.kt)("p",null,"Returns: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if successful."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Note that the following properties are not reactive. They are only used when the component first mounts."),(0,r.kt)("h3",{id:"tracking-options"},"Tracking options"),(0,r.kt)("h4",{id:"positionoptions"},(0,r.kt)("inlineCode",{parentName:"h4"},"positionOptions"),": ",(0,r.kt)("a",{parentName:"h4",href:"https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions"},"PositionOptions")),(0,r.kt)("p",null,"A Geolocation API ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions"},"PositionOptions")," object"),(0,r.kt)("h4",{id:"trackuserlocation"},(0,r.kt)("inlineCode",{parentName:"h4"},"trackUserLocation"),": boolean"),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," the GeolocateControl becomes a toggle button and when active the map will receive updates to the user's location as it changes. "),(0,r.kt)("h3",{id:"render-options"},"Render options"),(0,r.kt)("h4",{id:"fitboundsoptions"},(0,r.kt)("inlineCode",{parentName:"h4"},"fitBoundsOptions"),": ",(0,r.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#fitboundsoptions"},"FitBoundsOptions")),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"{maxZoom: 15}")),(0,r.kt)("p",null,"A (",(0,r.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/api/map/#map#fitbounds"},"fitBounds"),") options object to use when the map is panned and zoomed to the user's location."),(0,r.kt)("h4",{id:"position"},(0,r.kt)("inlineCode",{parentName:"h4"},"position"),": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'"),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"'top-right'")),(0,r.kt)("p",null,"Placement of the control relative to the map."),(0,r.kt)("h4",{id:"style"},(0,r.kt)("inlineCode",{parentName:"h4"},"style"),": CSSProperties"),(0,r.kt)("p",null,"CSS style override that applies to the control's container."),(0,r.kt)("h4",{id:"showaccuracycircle"},(0,r.kt)("inlineCode",{parentName:"h4"},"showAccuracyCircle"),": boolean"),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("p",null,"Draw a transparent circle will be drawn around the user location indicating the accuracy (95% confidence level) of the user's location. Set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to disable.\nThis only has effect if ",(0,r.kt)("inlineCode",{parentName:"p"},"showUserLocation")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". "),(0,r.kt)("h4",{id:"showuserheading"},(0,r.kt)("inlineCode",{parentName:"h4"},"showUserHeading"),": boolean"),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", an arrow will be drawn next to the user location dot indicating the device's heading.\nThis only has affect when ",(0,r.kt)("inlineCode",{parentName:"p"},"trackUserLocation")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h4",{id:"showuserlocation"},(0,r.kt)("inlineCode",{parentName:"h4"},"showUserLocation"),": boolean"),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("p",null,"Show a dot on the map at the user's location. Set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to disable."),(0,r.kt)("h3",{id:"callbacks"},"Callbacks"),(0,r.kt)("h4",{id:"ongeolocate"},(0,r.kt)("inlineCode",{parentName:"h4"},"onGeolocate"),": (evt: ",(0,r.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#geolocateresultevent"},"GeolocateResultEvent"),") => void"),(0,r.kt)("p",null,"Called on each Geolocation API position update that returned as success."),(0,r.kt)("h4",{id:"onerror"},(0,r.kt)("inlineCode",{parentName:"h4"},"onError"),": (evt: ",(0,r.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#geolocateerrorevent"},"GeolocateErrorEvent"),") => void"),(0,r.kt)("p",null,"Called on each Geolocation API position update that returned as an error."),(0,r.kt)("h4",{id:"onoutofmaxbounds"},(0,r.kt)("inlineCode",{parentName:"h4"},"onOutOfMaxBounds"),": (evt: ",(0,r.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#geolocateresultevent"},"GeolocateResultEvent"),") => void"),(0,r.kt)("p",null,"Called on each Geolocation API position update that returned as success but user position is out of map ",(0,r.kt)("inlineCode",{parentName:"p"},"maxBounds"),"."),(0,r.kt)("h4",{id:"ontrackuserlocationstart"},(0,r.kt)("inlineCode",{parentName:"h4"},"onTrackUserLocationStart"),": (evt: ",(0,r.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#geolocateevent"},"GeolocateEvent"),") => void"),(0,r.kt)("p",null,"Called when the GeolocateControl changes to the active lock state."),(0,r.kt)("h4",{id:"ontrackuserlocationend"},(0,r.kt)("inlineCode",{parentName:"h4"},"onTrackUserLocationEnd"),": (evt: ",(0,r.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#geolocateevent"},"GeolocateEvent"),") => void"),(0,r.kt)("p",null,"Called when the GeolocateControl changes to the background state."),(0,r.kt)("h2",{id:"source"},"Source"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/visgl/react-map-gl/tree/7.0-release/src/components/geolocate-control.ts"},"geolocate-control.ts")))}h.isMDXComponent=!0}}]);