"use strict";(self.webpackChunkreact_map_gl_website=self.webpackChunkreact_map_gl_website||[]).push([[5504],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),s=r,u=m["".concat(p,".").concat(s)]||m[s]||k[s]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},323:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>m});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},p="Marker",d={unversionedId:"api-reference/marker",id:"api-reference/marker",title:"Marker",description:"React component that wraps Marker.",source:"@site/../docs/api-reference/marker.md",sourceDirName:"api-reference",slug:"/api-reference/marker",permalink:"/react-map-gl/docs/api-reference/marker",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/marker.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"MapProvider",permalink:"/react-map-gl/docs/api-reference/map-provider"},next:{title:"NavigationControl",permalink:"/react-map-gl/docs/api-reference/navigation-control"}},c={},m=[{value:"Properties",id:"properties",level:2},{value:"Render options",id:"render-options",level:3},{value:"<code>anchor</code>: &#39;center&#39; | &#39;left&#39; | &#39;right&#39; | &#39;top&#39; | &#39;bottom&#39; | &#39;top-left&#39; | &#39;top-right&#39; | &#39;bottom-left&#39; | &#39;bottom-right&#39;",id:"anchor",level:4},{value:"<code>color</code>: string",id:"color",level:4},{value:"<code>clickTolerance</code>: number",id:"clicktolerance",level:4},{value:"<code>draggable</code>: boolean",id:"draggable",level:4},{value:"<code>latitude</code>: number",id:"latitude",level:4},{value:"<code>longitude</code>: number",id:"longitude",level:4},{value:"<code>offset</code>: PointLike",id:"offset",level:4},{value:"<code>pitchAlignment</code>: &#39;map&#39; | &#39;viewport&#39; | &#39;auto&#39;",id:"pitchalignment",level:4},{value:"<code>rotation</code>: number",id:"rotation",level:4},{value:"<code>rotationAlignment</code>: &#39;map&#39; | &#39;viewport&#39; | &#39;auto&#39;",id:"rotationalignment",level:4},{value:"<code>scale</code>: number",id:"scale",level:4},{value:"<code>style</code>: CSSProperties",id:"style",level:4},{value:"Callbacks",id:"callbacks",level:3},{value:"<code>onClick</code>: (evt: MapEvent) =&gt; void",id:"onclick",level:4},{value:"<code>onDragStart</code>: (evt: MarkerDragEvent) =&gt; void",id:"ondragstart",level:4},{value:"<code>onDrag</code>: (evt: MarkerDragEvent) =&gt; void",id:"ondrag",level:4},{value:"<code>onDragEnd</code>: (evt: MarkerDragEvent) =&gt; void",id:"ondragend",level:4},{value:"Source",id:"source",level:2}],k={toc:m},s="wrapper";function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(s,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"marker"},"Marker"),(0,i.kt)("p",null,"React component that wraps ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/api/markers/#marker"},"Marker"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as React from 'react';\nimport Map, {Marker} from 'react-map-gl';\n\nfunction App() {\n  return <Map\n    mapLib={import('mapbox-gl')}\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <Marker longitude={-100} latitude={40} anchor=\"bottom\" >\n      <img src=\"./pin.png\" />\n    </Marker>\n  </Map>;\n}\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Marker")," is mounted with child components, then its content will be rendered to the specified location. If it is mounted with no content, then a default marker will be used."),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"render-options"},"Render options"),(0,i.kt)("h4",{id:"anchor"},(0,i.kt)("inlineCode",{parentName:"h4"},"anchor"),": 'center' | 'left' | 'right' | 'top' | 'bottom' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"'center'")),(0,i.kt)("p",null,"A string indicating the part of the Marker that should be positioned closest to the coordinate set via ",(0,i.kt)("inlineCode",{parentName:"p"},"longitude")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"latitude"),"."),(0,i.kt)("h4",{id:"color"},(0,i.kt)("inlineCode",{parentName:"h4"},"color"),": string"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"'#3FB1CE'")),(0,i.kt)("p",null,"The color to use for the default marker if the component contains no content."),(0,i.kt)("h4",{id:"clicktolerance"},(0,i.kt)("inlineCode",{parentName:"h4"},"clickTolerance"),": number"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," (inherits ",(0,i.kt)("a",{parentName:"p",href:"/react-map-gl/docs/api-reference/map"},"Map"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"clickTolerance"),")"),(0,i.kt)("p",null,"The max number of pixels a user can shift the mouse pointer during a click on the marker for it to be considered a valid click (as opposed to a marker drag)."),(0,i.kt)("h4",{id:"draggable"},(0,i.kt)("inlineCode",{parentName:"h4"},"draggable"),": boolean"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the marker is able to be dragged to a new position on the map."),(0,i.kt)("h4",{id:"latitude"},(0,i.kt)("inlineCode",{parentName:"h4"},"latitude"),": number"),(0,i.kt)("p",null,"Required. The latitude of the anchor location."),(0,i.kt)("h4",{id:"longitude"},(0,i.kt)("inlineCode",{parentName:"h4"},"longitude"),": number"),(0,i.kt)("p",null,"Required. The longitude of the anchor location."),(0,i.kt)("h4",{id:"offset"},(0,i.kt)("inlineCode",{parentName:"h4"},"offset"),": ",(0,i.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#pointlike"},"PointLike")),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"null")),(0,i.kt)("p",null,"The offset in pixels as a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/api/geography/#pointlike"},"PointLike")," object to apply relative to the element's center. Negatives indicate left and up."),(0,i.kt)("h4",{id:"pitchalignment"},(0,i.kt)("inlineCode",{parentName:"h4"},"pitchAlignment"),": 'map' | 'viewport' | 'auto'"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"'auto'")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"map")," aligns the ",(0,i.kt)("inlineCode",{parentName:"li"},"Marker")," to the plane of the map."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"viewport")," aligns the ",(0,i.kt)("inlineCode",{parentName:"li"},"Marker")," to the plane of the viewport."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auto")," automatically matches the value of ",(0,i.kt)("inlineCode",{parentName:"li"},"rotationAlignment"),".")),(0,i.kt)("h4",{id:"rotation"},(0,i.kt)("inlineCode",{parentName:"h4"},"rotation"),": number"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"0")),(0,i.kt)("p",null,"The rotation angle of the marker in degrees, relative to its ",(0,i.kt)("inlineCode",{parentName:"p"},"rotationAlignment")," setting. A positive value will rotate the marker clockwise."),(0,i.kt)("h4",{id:"rotationalignment"},(0,i.kt)("inlineCode",{parentName:"h4"},"rotationAlignment"),": 'map' | 'viewport' | 'auto'"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"'auto'")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"map")," aligns the ",(0,i.kt)("inlineCode",{parentName:"li"},"Marker"),"'s rotation relative to the map, maintaining a bearing as the map rotates."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"viewport")," aligns the ",(0,i.kt)("inlineCode",{parentName:"li"},"Marker"),"'s rotation relative to the viewport, agnostic to map rotations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auto")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"li"},"viewport"),".")),(0,i.kt)("h4",{id:"scale"},(0,i.kt)("inlineCode",{parentName:"h4"},"scale"),": number"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"1")),(0,i.kt)("p",null,"The scale to use for the default marker if the component contains no content.\nThe default scale (",(0,i.kt)("inlineCode",{parentName:"p"},"1"),") corresponds to a height of ",(0,i.kt)("inlineCode",{parentName:"p"},"41px")," and a width of ",(0,i.kt)("inlineCode",{parentName:"p"},"27px"),"."),(0,i.kt)("p",null,"This prop is not reactive (only used when the marker is mounted)."),(0,i.kt)("h4",{id:"style"},(0,i.kt)("inlineCode",{parentName:"h4"},"style"),": CSSProperties"),(0,i.kt)("p",null,"CSS style override that applies to the marker's container."),(0,i.kt)("h3",{id:"callbacks"},"Callbacks"),(0,i.kt)("h4",{id:"onclick"},(0,i.kt)("inlineCode",{parentName:"h4"},"onClick"),": (evt: ",(0,i.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#mapevent"},"MapEvent"),") => void"),(0,i.kt)("p",null,"Called when the marker is clicked on."),(0,i.kt)("h4",{id:"ondragstart"},(0,i.kt)("inlineCode",{parentName:"h4"},"onDragStart"),": (evt: ",(0,i.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#markerdragevent"},"MarkerDragEvent"),") => void"),(0,i.kt)("p",null,"Called when dragging starts, if ",(0,i.kt)("inlineCode",{parentName:"p"},"draggable")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h4",{id:"ondrag"},(0,i.kt)("inlineCode",{parentName:"h4"},"onDrag"),": (evt: ",(0,i.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#markerdragevent"},"MarkerDragEvent"),") => void"),(0,i.kt)("p",null,"Called while dragging, if ",(0,i.kt)("inlineCode",{parentName:"p"},"draggable")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h4",{id:"ondragend"},(0,i.kt)("inlineCode",{parentName:"h4"},"onDragEnd"),": (evt: ",(0,i.kt)("a",{parentName:"h4",href:"/react-map-gl/docs/api-reference/types#markerdragevent"},"MarkerDragEvent"),") => void"),(0,i.kt)("p",null,"Called when dragging ends, if ",(0,i.kt)("inlineCode",{parentName:"p"},"draggable")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h2",{id:"source"},"Source"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/visgl/react-map-gl/tree/7.0-release/src/components/marker.ts"},"marker.ts")))}u.isMDXComponent=!0}}]);