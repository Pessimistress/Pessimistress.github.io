{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Adding Custom Data Native Mapbox Layers You can inject data and mapbox native layers by modifying the map style object: For details about data sources and layer configuration, check out the  Mapbox style specification . For dynamically updating data and layers, check out the  GeoJSON  and  GeoJSON animation  examples. Overlays react-map-gl provides a basic overlay API that enables applications to overlay data on top of maps. Note that the built-in overlays are intended to provide basic functionality only. For more feature rich and performant data visualization overlay use cases, consider using  deck.gl . Example Built-in Overlays Built-in overlays are:  SVGOverlay ,  HTMLOverlay , and  CanvasOverlay . They are imported using Example Overlays There are a couple of  additional overlays  in the examples folder that can be copied into applications  ScatterplotOverlay ,  DraggablePointsOverlay ,  ChoroplethOverlay . Third-party Overlays Third party overlays can also be created. For example, the  heatmap-overlay  uses  webgl-heatmap  to create geographic heatmaps. Want to create and share your own overlay? Check the  examples/additional-overlays  folder for examples.","headings":[{"value":"Adding Custom Data","depth":1},{"value":"Native Mapbox Layers","depth":2},{"value":"Overlays","depth":2},{"value":"Example","depth":3},{"value":"Built-in Overlays","depth":3},{"value":"Example Overlays","depth":3},{"value":"Third-party Overlays","depth":3}],"slug":"docs/get-started/adding-custom-data","title":"Adding Custom Data"},{"excerpt":"Introduction react-map-gl is a suite of  React  components for\n Mapbox GL JS . Mapbox GL JS is an awesome library for making modern web maps. It is beautiful, efficient (WebGL-powered), and fully open source. You may load map data from Mapbox's own service, which is free until a certain level of traffic is exceeded; or you can create and host your own map data using one of the many  open source tools . New to react-map-gl?  Get Started Want to contribute? See our  Developer Guide Design Philosophy At Uber, we make powerful web tools that contain maps. To manage the complexity of our applications, we fully embrace React and reactive programming. The stock mapbox-gl APIs are  imperative . That is, you instruct the map to do something (for example,  map.flyTo ), and it will execute the command at its own pace. This does not scale when we have many components that need to synchronize with each other. One use case we have is to render two maps side by side, and when the user interacts with one, update both cameras. We draw UI on top of the map using React, pinned to a given geolocation. We also render visualization layers on top of the map using WebGL, most notably with  deck.gl . The mapbox maps, the deck.gl canvas, and React controls' render cycles are all asynchronous. If we listen to the  move  event in the map and tell the other components to update, the other components would always be one frame behind. Ultimately, in the spirit of the  reactive programming paradigm , data always flows  down . In a complex application, any user input or data fetch can affect the rendering of many components. We might store the  source of truth  in a parent component state, or Redux store, or hooks, and let it propagate down to the map as well as its peers. As long as the map manages its own state, as mapbox-gl is designed to do, we risk the components going out of sync. react-map-gl creates a fully reactive wrapper for mapbox-gl. The  InteractiveMap  component is stateless. To move the map camera in anyway, the application must update the component's props. The application can also be confident that the map's camera would never deviate from the props that it's assigned. At first glance, its API may seem verbose to those who come from the imperative world of mapbox-gl. However, it is essential for the correctness of large applications. Limitations This library provides convenient wrappers around initializing and (to some degree) tracking the state of a Mapbox WebGL map. Because most of the functionality of Mapbox's JS API depends on the use of HTML5 canvases and WebGL, which React is not built to manipulate, the React component does not mirror all the functionality of Mapbox GL JS's Map class. You may access the native Mapbox API exposed by the  getMap()  function in this library. However, proceed with caution as calling the native APIs may break the connection between the React layer props and the underlying map state.","headings":[{"value":"Introduction","depth":1},{"value":"Design Philosophy","depth":2},{"value":"Limitations","depth":2}],"slug":"docs","title":"Introduction"},{"excerpt":"Upgrade Guide Upgrading to v4 onChangeViewport  is removed, use  onViewportChange  instead Immutable.js  is no longer a dependency Export  experimental.MapControls  is removed, use  MapController  instead InteractiveMap 's  mapControls  prop is renamed to  controller Removed support for the deprecated  interactive  property on the layer styles. Use the  interactiveLayerIds  prop to specify which layers are clickable. Upgrading to v3.2 The latest mapbox-gl release requires stylesheet to be included at all times. See  Get Started  for information about styling. Immutable.js is no longer a hard dependency and will be removed in the next major release. If you are importing immutable in your application, it is recommended that you explicitly list it in the application's dependencies. Upgrading to v3 v3 is a major upgrade of react-map-gl. While we have tried to gently deprecated any changed or removed features, a few breaking changes could not be avoided. Version Requirements The  Node Version Requirement  for  building  react-map-gl is now  >=v6.4.0 . Using prebuilt react-map-gl does  NOT  has this limitation. This is introduced by  Mapbox GL JS v0.38.0 MapGL Component Two Map Components  - v3 now splits the Map component into two React components:  StaticMap  and  InteractiveMap .  InteractiveMap  is the default export, and designed to be as compatible as possible with the v2 default component. onChangeViewport  callback now includes  width  and  height . The  viewport  parameter passed to the  onChangeViewport  callback now includes  width  and  height . Application code that composed the  viewport  with  width  and  height  may have to be updated. Please double check your render code if you relied on this behavior. Overlays Some Overlays Moved to Examples  -  Some less frequently used overlays ( DraggablePointsOverlay ,  ChoroplethOverlay ,  ScatterplotOverlay ), have been moved to examples. Most users are now using mapbox styles or deck.gl layers and removing these overlays reduces the size of the react-map-gl library for the majority of users that don't need them. If you still use them, simply copy the overlay source file(s) into your application. Overlays must be Children of the Map  - Overlays  must  now be rendered as children of the main  react-map-gl  component to automatically sync with the map viewport. fitBounds  utility function The  fitBounds  utility has been moved to the  viewport-mercator-project  library. The function can now be called as follows: Deprecations We have started to deprecate a few React props. In all the cases below, the old  props  will still work (you'll get a warning in the console), but they will likely be removed in the next major version of react-map-gl so you should start using the new  props  as soon as possible. Old Prop New Prop onChangeViewport(<viewport>) onViewportChange(<viewport>) onHoverFeatures(<features>) onHover(<event>) onClickFeatures(<features>) onClick(<event>) perspectiveEnabled [default: false] dragRotate [default: true] Upgrading to v2 v2 is API compatible with v1, however if you are still using  v1  of react-map-gl, make sure that you first upgrade: Your  node  version to  v4  or higher Your  react  version to  15.4  or higher. Background:  mapbox-gl  0.31.0 introduced a hard dependency on Node >= v4. Upgrading to v1 (Upgrading from 0.6.x) Importing Overlays  - The map overlay components ( HTMLOverlay ,  CanvasOverlay ,  SVGOverlay  etc) are now named exports. They previously had to be imported via their relative source paths: Map State  - The map state reported by  onViewportChanged  will now contain additional state fields (tracking not only  pitch  and  bearing  needed for perspective mode, but also transient information about how the projection is being changed by the user). This information must be passed back to the react-map-gl component in the next render. To simplify and future proof applications, it is recommended to simply save the entire  mapState  in your app store whenever it changes and then pass it back to the component rather than trying to keep track of individual fields (like  longitude ,  latitude  and  zoom ).","headings":[{"value":"Upgrade Guide","depth":1},{"value":"Upgrading to v4","depth":2},{"value":"Upgrading to v3.2","depth":2},{"value":"Upgrading to v3","depth":2},{"value":"Version Requirements","depth":3},{"value":"MapGL Component","depth":3},{"value":"onChangeViewport callback now includes width and height.","depth":4},{"value":"Overlays","depth":3},{"value":"fitBounds utility function","depth":3},{"value":"Deprecations","depth":3},{"value":"Upgrading to v2","depth":2},{"value":"Upgrading to v1","depth":2}],"slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"What's new react-map-gl v5.2 Release date: Jan 6, 2020 Highlights New Components :  ScaleControl NavigationControl : new  label  prop GeolocateControl : new  label ,  onGeolocate ,  auto  props New Export :  WebMercatorViewport  is re-exported from the  viewport-mercator-project  library for ease of use. It's recommended to import it from  react-map-gl  instead to avoid future dependency change. New Example :  Clusters react-map-gl v5.1 Release date: Oct 30, 2019 Highlights New Components :  Layer  and  Source  have been added to provide better React parity with the  Mapbox GL JS  API. Viewport transition :  transitionDuration  can be set to  'auto'  when using  FlyToInterpolator . New Example : Add an  example  with drawing library  react-map-gl-draw . react-map-gl v5.0 Release date: May 31, 2019 What's Changed The only change between the 5.0 release and the latest 4.1 release is Mapbox GL JS v1.0. By using this version, you opt into Mapbox's new pricing model, which bills per map load instead of map views. 5.0.x and 4.1.x will continue to update in parallel with otherwise identical features until November 2019 when Mapbox moves all users of 0.xx to a new pricing scheme. For more details, see mapbox's  changelog  and  blog post . Alongside Mapbox GL JS's new milestone, we have relaxed the  mapbox-gl  dependency from locking minor release ( ~0.53.0 ) to major release ( ^1.0.0 ). This will allow developers to upgrade faster without waiting for a new release from react-map-gl. react-map-gl v4.1 Release date: Mar 14, 2019 Highlights New Components :  FullscreenControl ,  GeolocateControl  have been added to provide better React parity with the  Mapbox GL JS  API. New callback props   InteractiveMap  supports more callbacks: onNativeClick react-map-gl v4.0 Release date: Nov 5, 2018 Highlights Relative dimensions  Both  InteractiveMap  and  StaticMap  now support CSS strings supplied to map  width  and  height  props. New  onResize  callback is fired when the map resizes. React 16  Upgrade to React 16.3 context and ref patterns Babel 7  Upgrade build system to Babel 7, better support for tree-shaking Style diffing  Now use Mapbox's native style diffing. Immutable is no longer required. Draggable Markers   Marker  component now supports a new prop  draggable , along with callbacks  onDragStart ,  onDrag , and  onDragEnd . 3d Popups   Popup  component now supports a new prop  sortByDepth  to enable proper occlusion when multiple popups are used in a tilted map. Interaction states   onViewportChange  is now called with richer descriptors of the user interaction, including  isPanning ,  isZooming  and  isRotating . Interactive layers  Dropped the requirement for the deprecated  interactive  property on the layer styles. Use the  interactiveLayerIds  prop to specify which layers are clickable. New callback props   InteractiveMap  supports more callbacks: onDblClick onMouseDown onMouseMove onMouseUp onTouchStart onTouchMove onTouchEnd onMouseEnter onMouseLeave onWheel onMouseOut See  upgrade guide  for breaking changes. react-map-gl v3.3 Release date: July, 2018 Highlights New  viewState  Property : Makes it possible to specify all map state properties ( longitude ,  latitude ,  zoom ,  bearing  and  pitch ) as a single property. New  onViewStateChange  callback : An alternative callback that matches the new  viewState  prop. react-map-gl v3.2 Realease date: January, 2018 Highlights Viewport transition : feature equivalent to Mapbox's flyTo and easeTo; smooth transition when using keyboard navigation or the NavigationControl. Better parity of Mapbox interaction : navigation using keyboard and the navigation control matches Mapbox behavior, including smooth transition when zooming and panning. Support for Map Reuse (experimental) : A new property  reuseMaps  is provided for applications that create and destroy maps, to help work around a mapbox-gl resource leak issue that can lead to a browser crash in certain situations. mapbox-gl 0.42.2 New props  of the InteractiveMap component: Map creation:  transformRequest ,  reuseMaps Interaction:  touchZoom ,  touchRotate Transition:  transitionDuration ,  transitionInterpolator ,  transitionEasing ,  transitionInterruption ,  onTransitionStart ,  onTransitionInterrupt ,  onTransitionEnd react-map-gl v3.1 Release date: October 19, 2017 Highlights Event handling Support right mouse drag to rotate Support keyboard navigation Allow controls and overlays to block map interactions React 16  - react-map-gl is now being tested with React 16, but the React peer dependency requirement is unchanged at  >=15.4.x . mapbox-gl v0.40.1 No Token warning : react-map-gl now renders an HTML message if no mapbox token is supplied. react-map-gl v3.0 Release date: July 27th, 2017 Highlights Latest Mapbox GL JS : Bumps  Mapbox GL JS  to  0.38 . Multi-Touch Support : Full support for multi-touch gestures such as pinch-to-zoom and rotate. New Components : The  MapGL  component has been split into  StaticMap  and  InteractiveMap  (the default). Also,  Popup ,  Marker ,  NavigationControl  have been added to provide better React parity with the  Mapbox GL JS  API. Improved Overlay Components : Supplying viewport props ( width   height   zoom   longitude  and  latitude ) are no longer required if you render  SVGOverlay ,  CanvasOverlay  or  HTMLOverlay  as a child of the map. Perspective mode is now supported in all overlays. New Props :  maxPitch ,  minPitch ,  dragPan ,  doubleClickZoom ,  touchZoomRotate ,\n scrollZoom  are now provided to allow granular control of map interactivity. Documentation : Significantly expanded and linked with our other geospatial frameworks. Examples : New stand-alone examples to get you started instantly with the new features. Event Handling : New event handling architecture that enables full customization of event handling (experimental). Components InteractiveMap (New, MapGL replacement) This is a wrapper on top of  StaticMap . It takes all the props of  StaticMap  and additional ones such as  onViewportChange ,  scrollZoom ,  dragRotate , etc. to control interactivity on the map. See  Source Code  for more information. StaticMap (New) This is the React wrapper around  Mapbox GL JS  and takes in viewport properties such as  width ,  height ,  latitude ,  longitude . Style diffing and updating logic also live here. See  Source Code  for more information. Overlays Three overlays ( ScatterplotOverlay ,  DraggablePointsOverlay ,  ChoroplethOverlay ), have been moved out of the library and are now only provided as examples. Property Changes Property Names  - some prop names have been modernized, the old ones will still work for now with a warning. Internal Properties  such as  isHovering ,  isDragging ,  startDragLngLat  have been removed.\nThese were never meant to be useful publicly and have caused confusions in the past. Utilities fitBounds :  fitBounds  has been moved to another repository and has been rewritten to provide a more logical interface. For more information, see the  Upgrade Guide . react-map-gl v2.0 Date: Jan 17, 2017 Highlights Latest mapbox-gl : Bump  mapbox-gl  to v0.31.0 new maxZoom prop  - Add  maxZoom  prop and defaults to  20 New onLoad prop  - Add  onLoad  event handler new onClick prop  - Add  onClick  prop handler (#140) react-map-gl v1.0 Perspective Mode  - Now supports  bearing  and  pitch  properties, per mapbox-gl-js api documentation. These props default to 0 which means that maps will still be rendered in flat/ortographic mode when they are not provided Support for ES6 imports  - The map overlay components (HTMLOverlay, CanvasOverlay, SVGOverlay etc) previously had to be imported via their relative source paths can now be imported directly using `import {SVGOverlay} from 'react-map-gl'. react-map-gl v0.6 Initial public version","headings":[{"value":"What's new","depth":1},{"value":"react-map-gl v5.2","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v5.1","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v5.0","depth":2},{"value":"What's Changed","depth":3},{"value":"react-map-gl v4.1","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v4.0","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v3.3","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v3.2","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v3.1","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v3.0","depth":2},{"value":"Highlights","depth":3},{"value":"Components","depth":3},{"value":"InteractiveMap (New, MapGL replacement)","depth":4},{"value":"StaticMap (New)","depth":4},{"value":"Overlays","depth":4},{"value":"Property Changes","depth":3},{"value":"Utilities","depth":3},{"value":"react-map-gl v2.0","depth":2},{"value":"Highlights","depth":3},{"value":"react-map-gl v1.0","depth":2},{"value":"react-map-gl v0.6","depth":2}],"slug":"docs/whats-new","title":"What's new"},{"excerpt":"About Mapbox Tokens react-map-gl and the underlying Mapbox GL JS libraries are open source and free to use. However, to load the map styles and tiles from Mapbox's data service, you will need to register on their website in order to retrieve an access token required by the map component, which will be used to identify you and start serving up map tiles. The service will be free until a certain level of traffic is exceeded. There are several ways to provide a token to your app, as showcased in some of the example folders: Set the  MapboxAccessToken  environment variable Provide it in the URL, e.g  ?access_token=TOKEN Pass it as a prop to the ReactMapGL instance  <ReactMapGL mapboxApiAccessToken={TOKEN} /> But we would recommend using something like  dotenv  and put your key in an untracked  .env  file, that will then expose it as a  process.env  variable, with much less leaking risks. Display Maps Without A Mapbox Token It is possible to use the map component without the Mapbox service, if you use another tile source (for example, if you host your own map tiles). You will need a custom Mapbox GL style that points to your own  vector tile source , and pass it to  ReactMapGL  using the  mapStyle  prop. This custom style must match the schema of your tile source.  Open source tile schemas include:  TileZen schema OpenMapTiles schema  Some useful resources for creating your own map service: Mapbox Vector Tile Spec Open source tools If you are using a third party service that requires header based authentication, you can do this by defining a function to pass to  ReactMapGL  using the  transformRequest  prop. An example function:","headings":[{"value":"About Mapbox Tokens","depth":1},{"value":"Display Maps Without A Mapbox Token","depth":2}],"slug":"docs/get-started/mapbox-tokens","title":"About Mapbox Tokens"},{"excerpt":"State Management InteractiveMap  is designed to be a stateless component. Its appearance is entirely controlled by the properties that are passed in from its parent. In this architecture, transition works the same way as interaction: the component shall notify the application of \"user intent\" by calling the  onViewportChange  callback, but ultimately the application needs to decide what to do with it. The most simple handling of this intent is to save it and pass it back to the component: User interaction and transition will not work without a valid  onViewportChange  handler. The advantage of this practice is that it ensures a single source of truth regarding the viewport state (in the example above, saved in the  state  of the container component). When you use this viewport state to direct the rendering of other components, it is guaranteed that they will always be synced with the map. You may apply additional constraints to the viewport: Or manipulate the viewport outside of the ReactMap component: Using with Redux If you're using redux, it is very easy to hook this component up to store state in the redux state tree.\nThe simplest way is to take all properties passed to the  onViewportChange  function property and add them\ndirectly into the store. This state can then be passed back to the  <ReactMapGL>  component without any transformation.","headings":[{"value":"State Management","depth":1},{"value":"Using with Redux","depth":2}],"slug":"docs/get-started/state-management","title":"State Management"},{"excerpt":"Get Started Installation Using  react-map-gl  requires  node >= v4  and  react >= 16.3 . Example See full project setup in  get-started examples Styling The current mapbox-gl release requires its stylesheet be included at all times. The marker, popup and navigation components in react-map-gl also need the stylesheet to work properly. You may add the stylesheet to the head of your page: Find out your mapbox version by running  yarn list mapbox-gl  or  npm ls mapbox-gl . Or embed it in your app by using -  browserify-css \nwith Browserify or -  css-loader  with Webpack: Enable Right-to-Left Language Support This is the same as  import {setRTLTextPlugin} from 'mapbox-gl'  in the browser, but will not crash in node. The export mainly offers a convenience when using server-side rendering. To use this API, consult Mapbox's  setRTLTextPlugin  documentation. Using with Browserify, Webpack, and other JavaScript Bundlers browserify  - react-map-gl is extensively tested with  browserify  and works without configuration. webpack 2  - Most of the provided react-map-gl examples use webpack 2. Look at the  get started examples  folder for minimalist templates. create-react-app  - react-map-gl is compatible with  create-react-app . create-react-app-typescript  - react-map-gl is compatible with  create-react-app-typescript . You can see an example  here . There's many other ready-to-run  examples  you can take a look at if you need more inspiration.","headings":[{"value":"Get Started","depth":1},{"value":"Installation","depth":2},{"value":"Example","depth":2},{"value":"Styling","depth":2},{"value":"Enable Right-to-Left Language Support","depth":2},{"value":"Using with Browserify, Webpack, and other JavaScript Bundlers","depth":2}],"slug":"docs/get-started/get-started","title":"Get Started"},{"excerpt":"Canvas Overlay Allows applications to overlay data on top of maps using a canvas. Properties redraw  (Function) Called every time the map updates. Parameters: ctx  {CanvasRenderingContext2D} - rendering context of the canvas width  {Number} - width of the viewport height  {Number} - height of the viewport project  {Function} - get screen position  [x, y]  from geo coordinates  [lng, lat] unproject  {Function} - get geo coordinates  [lng, lat]  from screen position  [x, y] captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  false Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  false Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  false Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. Source canvas-overlay.js","headings":[{"value":"Canvas Overlay","depth":1},{"value":"Properties","depth":2},{"value":"redraw (Function)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/canvas-overlay","title":"Canvas Overlay"},{"excerpt":"FlyToInterpolator Implements the  TransitionInterpolator  interface. Designed to use with the  transitionInterpolator  prop of  InteractiveMap . This interpolator offers similar behavior to Mapbox's  flyTo  method. Constructor new FlyToInterpolator([options]) Parameters: options  {Object} (optional) curve  (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path. speed  (Number, optional, default: 1.2) - The average speed of the animation defined in relation to  options.curve , it linearly affects the duration, higher speed returns smaller durations and vice versa. screenSpeed  (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to  opts.speed  it linearly affects the duration,  when specified  opts.speed  is ignored. maxDuration  (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value,  0  is returned. Source viewport-fly-to-interpolator.js","headings":[{"value":"FlyToInterpolator","depth":1},{"value":"Constructor","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/fly-to-interpolator","title":"FlyToInterpolator"},{"excerpt":"Fullscreen Control This is a React equivalent of Mapbox's  FullscreenControl . Properties container  (HTMLElement) container  is the compatible DOM element which should be made full screen. By default, the map container element will be made full screen. label  (String) default:  Toggle fullscreen Label applied to the fullscreen control button. Styling Like its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page. Source fullscreen-control.js","headings":[{"value":"Fullscreen Control","depth":1},{"value":"Properties","depth":2},{"value":"container (HTMLElement)","depth":5},{"value":"label (String)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/fullscreen-control","title":"Fullscreen Control"},{"excerpt":"HTML Overlay Allows applications to overlay data on top of maps using a HTML container. Properties redraw  (Function) Called every time the map updates. Parameters: width  {Number} - width of the viewport height  {Number} - height of the viewport project  {Function} - get screen position  [x, y]  from geo coordinates  [lng, lat] unproject  {Function} - get geo coordinates  [lng, lat]  from screen position  [x, y] style  (Object) Additional css styles of the  div  container. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  false Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  false Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  false Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. Source html-overlay.js","headings":[{"value":"HTML Overlay","depth":1},{"value":"Properties","depth":2},{"value":"redraw (Function)","depth":5},{"value":"style (Object)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/html-overlay","title":"HTML Overlay"},{"excerpt":"InteractiveMap This component renders  MapboxGL  and provides full interactivity support.\nIt uses  StaticMap  underneath to render the final map component.\nThis is the  default  exported component from  ReactMapGL . Properties Initialization Inherit the following props from  StaticMap : attributionControl  (Boolean) disableTokenWarning  (Boolean) gl  (WebGLContext) mapboxApiAccessToken  (String) mapboxApiUrl  (String) mapOptions  (Object) preserveDrawingBuffer  (Boolean) preventStyleDiffing  (Boolean) reuseMaps  (Boolean) transformRequest  (Function) Map State Inherit the following props from  StaticMap : mapStyle  (String | Object | Immutable.Map) width  (Number | String) height  (Number | String) latitude  (Number) longitude  (Number) zoom  (Number) bearing  (Number) pitch  (Number) altitude  (Number) viewState  (Object) Render Options Inherit the following props from  StaticMap : style  (Object) visible  (Boolean) visibilityConstraints  (Object) getCursor  (Function) Accessor that returns a cursor style to show interactive state. Called when the component is being rendered. Parameters state  - The current state of the component. state.isDragging  - If the map is being dragged. state.isHovering  - If the pointer is over an interactive feature. See  interactiveLayerIds  prop. The default implementation of  getCursor  returns  'pointer'  if  isHovering ,  'grabbing'  if  isDragging  and  'grab'  otherwise. Interaction Options maxZoom  (Number) default:  20 Max zoom level. minZoom  (Number) default:  0 Min zoom level. maxPitch  (Number) default:  60 Max pitch in degrees. minPitch  (Number) default:  0 Min pitch in degrees. scrollZoom  (Boolean) default:  true Enable scroll to zoom. dragPan  (Boolean) default:  true Enable drag to pan. dragRotate  (Boolean) default:  true Enable drag to rotate. doubleClickZoom  (Boolean) default:  true Enable double click to zoom. touchZoom  (Boolean) default:  true Enable multitouch zoom. touchRotate  (Boolean) default:  false Enable multitouch rotate. touchAction  (String) default:  'none' Allow browser default touch actions. Default  none . See  hammer.js doc . By default, the map captures all touch interactions. This prop is useful for mobile applications to unblock default scrolling behavior. For example, use the combination  dragPan: false  and  touchAction: 'pan-y'  to allow vertical page scroll when dragging over the map. clickRadius  (Number) default:  0 Radius to detect features around a clicked point. controller  (Object) A map controller instance to replace the default map controller. This object must implement the following interface: events  - An array of subscribed events handleEvent(event, context)  - A method that handles interactive events interactiveLayerIds  (Array) default:  null A list of layer ids that are interactive. If specified: Pointer event callbacks will only query the features under the pointer of these layers. The  getCursor  callback will receive  isHovering: true  when hover over features of these layers. If not specified: Pointer event callbacks will query the features under the pointer of all layers. The  getCursor  callback will always receive  isHovering: false . Transitions transitionDuration  (Number) default:  0 Duration of transition in milliseconds. If specified, the map's viewport will smoothly move from the previous props to the current one. transitionInterpolator  (Object) default:  new LinearInterpolator() An interpolator object that defines the transition behavior between two map states.  react-map-gl  offers two interpolators: LinearInterpolator  - similar to Mapbox's  easeTo  behavior. FlyToInterpolator  - similar to Mapbox's  flyTo  behavior. You may import them as follows: For details about using transition interpolators, see  transitions . transitionEasing  (Function) default:  t => t Easing function that maps a value from  [0, 1]  to  [0, 1] . Check out  http://easings.net/  for common easing curves. transitionInterruption  (Number) default:  TRANSITION_EVENTS.BREAK What to do if an ongoing transition is interrupted by another transition. There are 4 options: TRANSITION_EVENTS.BREAK  - Start new transition from the current view. TRANSITION_EVENTS.SNAP_TO_END  - Jump to the end of the previous transition before starting the new transition. TRANSITION_EVENTS.IGNORE  - Complete the previous transition and ignore the new viewport change. TRANSITION_EVENTS.UPDATE  - Continue the ongoing transition but change its destination to the new viewport. You may import the constants as follows: Callbacks Inherit the following props from  StaticMap : onLoad  (Function) onResize  (Function) onError  (Function) onViewportChange  (Function) Callback that is fired when the map's viewport properties should be updated. If not supplied, the map is not interactive. Arguments: viewState  (Object) The next viewport properties, including:  width ,  height ,  latitude ,  longitude ,  zoom ,  bearing ,  pitch ,  altitude ,  maxZoom ,  minZoom ,  maxPitch ,  minPitch ,  transitionDuration ,  transitionEasing ,  transitionInterpolator ,  transitionInterruption . interactionState  (Object) The current interaction that caused this viewport change. See  onInteractionStateChange  for possible fields. oldViewState  (Object) The current viewport properties. onViewStateChange  (Function) A newer version of the  onViewportChange  callback. Both are supported and provide equivalent functionality. onInteractionStateChange  (Function) Callback that is fired when the user interacted with the map. Possible fields include: interactionState.inTransition  (Boolean) interactionState.isDragging  (Boolean) interactionState.isPanning  (Boolean) interactionState.isRotating  (Boolean) interactionState.isZooming  (Boolean) Note: onInteractionStateChange  may be fired without  onViewportChange . For example, when the pointer is released at the end of a drag-pan,  isDragging  are reset to  false , without the viewport's  longitude  and  latitude  changing. onHover  (Function) Called when the mouse moves over the map (without button pressed). Receives a  PointerEvent  object. onClick  (Function) Called when the map is single clicked. Receives a  PointerEvent  object. This event is not fired on double click therefore there may be a delay between pointer up and the event. onNativeClick  (Function) Called when the map is clicked. Receives a  PointerEvent  object. This event is fired twice on double click. onDblClick  (Function) Called when the map is double clicked. Receives a  PointerEvent  object. onMouseDown  (Function) Called when a pointing device (usually a mouse) is pressed within the map. Receives a  PointerEvent  object. onMouseMove  (Function) Called when a pointing device (usually a mouse) is moved within the map. Receives a  PointerEvent  object. onMouseUp  (Function) Called when a pointing device (usually a mouse) is released within the map. Receives a  PointerEvent  object. onTouchStart  (Function) Called when a  touchstart  event occurs within the map. Receives a  PointerEvent  object. onTouchMove  (Function) Called when a  touchmove  event occurs within the map. Receives a  PointerEvent  object. onTouchEnd  (Function) Called when a  touchend  event occurs within the map. Receives a  PointerEvent  object. onMouseEnter  (Function) Called when a pointing device (usually a mouse) enters a visible portion of one of the interactive layers, defined by the  interactiveLayerIds  prop. Receives a  PointerEvent  object. onMouseLeave  (Function) Called when a pointing device (usually a mouse) leaves a visible portion of one of the interactive layers, defined by the  interactiveLayerIds  prop. Receives a  PointerEvent  object. onWheel  (Function) Called when a  wheel  event occurs within the map. Receives a  PointerEvent  object. onMouseOut  (Function) Called when a point device (usually a mouse) leaves the map's canvas. Receives a  PointerEvent  object. onContextMenu  (Function) Called when the context menu is activated. Prevent default here to enable right button interaction. Default:  event => event.preventDefault() onTransitionStart  (Function) Callback that is fired when a transition is triggered. onTransitionInterrupt  (Function) Callback that is fired when an ongoing transition is interrupted by another transition. onTransitionEnd  (Function) Callback that is fired when a transition is complete. Methods Inherit the following methods from  StaticMap : getMap() queryRenderedFeatures(geometry, parameters) Source interactive-map.js","headings":[{"value":"InteractiveMap","depth":1},{"value":"Properties","depth":2},{"value":"Initialization","depth":3},{"value":"Map State","depth":3},{"value":"Render Options","depth":3},{"value":"getCursor (Function)","depth":5},{"value":"Interaction Options","depth":3},{"value":"maxZoom (Number)","depth":5},{"value":"minZoom (Number)","depth":5},{"value":"maxPitch (Number)","depth":5},{"value":"minPitch (Number)","depth":5},{"value":"scrollZoom (Boolean)","depth":5},{"value":"dragPan (Boolean)","depth":5},{"value":"dragRotate (Boolean)","depth":5},{"value":"doubleClickZoom (Boolean)","depth":5},{"value":"touchZoom (Boolean)","depth":5},{"value":"touchRotate (Boolean)","depth":5},{"value":"touchAction (String)","depth":5},{"value":"clickRadius (Number)","depth":5},{"value":"controller (Object)","depth":5},{"value":"interactiveLayerIds (Array)","depth":5},{"value":"Transitions","depth":3},{"value":"transitionDuration (Number)","depth":5},{"value":"transitionInterpolator (Object)","depth":5},{"value":"transitionEasing (Function)","depth":5},{"value":"transitionInterruption (Number)","depth":5},{"value":"Callbacks","depth":3},{"value":"onViewportChange (Function)","depth":5},{"value":"onViewStateChange (Function)","depth":5},{"value":"onInteractionStateChange (Function)","depth":5},{"value":"onHover (Function)","depth":5},{"value":"onClick (Function)","depth":5},{"value":"onNativeClick (Function)","depth":5},{"value":"onDblClick (Function)","depth":5},{"value":"onMouseDown (Function)","depth":5},{"value":"onMouseMove (Function)","depth":5},{"value":"onMouseUp (Function)","depth":5},{"value":"onTouchStart (Function)","depth":5},{"value":"onTouchMove (Function)","depth":5},{"value":"onTouchEnd (Function)","depth":5},{"value":"onMouseEnter (Function)","depth":5},{"value":"onMouseLeave (Function)","depth":5},{"value":"onWheel (Function)","depth":5},{"value":"onMouseOut (Function)","depth":5},{"value":"onContextMenu (Function)","depth":5},{"value":"onTransitionStart (Function)","depth":5},{"value":"onTransitionInterrupt (Function)","depth":5},{"value":"onTransitionEnd (Function)","depth":5},{"value":"Methods","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/interactive-map","title":"InteractiveMap"},{"excerpt":"Geolocate Control This is a React equivalent of Mapbox's  GeolocateControl . Properties Accepts all the options of  Mapbox GeolocateControl . onViewportChange  (Function, optional) Callback when the user interaction with this control requests a viewport update. If provided, will be called instead of the containing  InteractiveMap 's  onViewportChange . onGeolocate  (Function, optional) Callback when Geolocation API position updates. It is called with a Geolocation API  PositionOptions  object. positionOptions  (Object) default:  {enableHighAccuracy: false, timeout: 6000} A Geolocation API  PositionOptions  object. fitBoundsOptions  (Object) default:  {maxZoom: 15} A  fitBounds  options object to use when the map is panned and zoomed to the user's location. The default is to use a  maxZoom of 15 to limit how far the map will zoom in for very accurate locations. trackUserLocation  (Boolean) default:  false If true the Geolocate Control becomes a toggle button and when active the map will receive updates to the user's location as it changes. showUserLocation  (Boolean) default:  true By default a dot will be shown on the map at the user's location. Set to false to disable. style  (Object) A  React style  object applied to Geolocate control button. Check  locate user  example for basic styling. label  (String) default:  Geolocate Label applied to the Geolocate control button. auto  (Boolean) default:  false Programmatically triggers geolocate when set to true. Initializing the component with true triggers inside  componentDidMount  where as changing to true at a later point triggers inside  componentDidUpdate . Initally setting as or changing to false has no effect. Styling Like its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page. Source geolocate-control.js","headings":[{"value":"Geolocate Control","depth":1},{"value":"Properties","depth":2},{"value":"onViewportChange (Function, optional)","depth":5},{"value":"onGeolocate (Function, optional)","depth":5},{"value":"positionOptions (Object)","depth":5},{"value":"fitBoundsOptions (Object)","depth":5},{"value":"trackUserLocation (Boolean)","depth":5},{"value":"showUserLocation (Boolean)","depth":5},{"value":"style (Object)","depth":5},{"value":"label (String)","depth":5},{"value":"auto (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/geolocate-control","title":"Geolocate Control"},{"excerpt":"LinearInterpolator Implements the  TransitionInterpolator  interface. Designed to use with the  transitionInterpolator  prop of  InteractiveMap . Interpolates all viewport props linearly. This interpolator offers similar behavior to Mapbox's  easeTo  when combined with a  transitionEasing  function. You may optionally limit the transition to selected viewport props, for example  new LinearInterpolator(['pitch', 'bearing'])  animates pitch and bearing while the user is still allowed to pan and zoom. Constructor new LinearInterpolator([options]) Parameters: options  {Object} (optional) transitionProps  {Array} (optional) - list of prop names to interpolate. Default:  ['longitude', 'latitude', 'zoom', 'pitch', 'bearing'] . around  {Array} (optional) - a point to zoom/rotate the map around, as  [x, y]  in screen position. Source linear-interpolator.js","headings":[{"value":"LinearInterpolator","depth":1},{"value":"Constructor","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/linear-interpolator","title":"LinearInterpolator"},{"excerpt":"Layer This component allows apps to create a  map layer  using React. Properties The props provided to this component should be conforming to the  Mapbox layer specification . When props change  shallowly , the component will perform style diffing to update the layer. Avoid defining constant objects/arrays inline may help performance. Identity Properties Once a  <Layer>  is mounted, the following props should not change. If you add/remove multiple JSX layers dynamically, make sure you use React's  key prop  to give each element a stable identity. id  (String) Unique identifier of the layer. If not provided, a default id will be assigned. type  (String, required) Type of the layer. Options beforeId  (String) The ID of an existing layer to insert this layer before. If this prop is omitted, the layer will be appended to the end of the layers array. This is useful when using dynamic layers with a map style from a URL. Note that layers are added by the order that they mount. They are  NOT  reordered later if their relative positions in the JSX tree change. If dynamic reordering is desired, you should manipulate  beforeId  for consistent behavior. source  (String) source  is required by some layer types in the Mapbox style specification. If  <Layer>  is used as the child of a  Source  component, this prop will be overwritten by the id of the parent source. Source layer.js","headings":[{"value":"Layer","depth":1},{"value":"Properties","depth":2},{"value":"Identity Properties","depth":3},{"value":"id (String)","depth":5},{"value":"type (String, required)","depth":5},{"value":"Options","depth":3},{"value":"beforeId (String)","depth":5},{"value":"source (String)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/layer","title":"Layer"},{"excerpt":"Navigation Control This is a React equivalent of Mapbox's  NavigationControl ,\nwhich provides zoom buttons and a compass button. Properties onViewportChange  (Function) Callback when the user interaction with this control requests a viewport update. If provided, will be called instead of the containing  InteractiveMap 's  onViewportChange . showCompass  (Boolean) default:  true Show or hide the compass button showZoom  (Boolean) default:  true Show or hide the zoom buttons captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. zoomInLabel  (String) default:  Zoom In Label applied to the zoom in control button. zoomOutLabel  (String) default:  Zoom Out Label applied to the zoom out control button. compassLabel  (String) default:  Reset North Label applied to the compass control button. Styling Like its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page. Source navigation-control.js","headings":[{"value":"Navigation Control","depth":1},{"value":"Properties","depth":2},{"value":"onViewportChange (Function)","depth":5},{"value":"showCompass (Boolean)","depth":5},{"value":"showZoom (Boolean)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"zoomInLabel (String)","depth":5},{"value":"zoomOutLabel (String)","depth":5},{"value":"compassLabel (String)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/navigation-control","title":"Navigation Control"},{"excerpt":"PointerEvent Event object passed to some of  InteractiveMap 's callback props. Members type  (String) The name of the event. point  (Array) The screen coordinates that is being clicked. lngLat  (Array) The geo coordinates that is being clicked. target  (Element) The target element of the pointer event. srcEvent  (Object) The original browser event.","headings":[{"value":"PointerEvent","depth":1},{"value":"Members","depth":2},{"value":"type (String)","depth":5},{"value":"point (Array)","depth":5},{"value":"lngLat (Array)","depth":5},{"value":"target (Element)","depth":5},{"value":"srcEvent (Object)","depth":5}],"slug":"docs/api-reference/pointer-event","title":"PointerEvent"},{"excerpt":"Popup Control This is a React equivalent of Mapbox's  Popup Control , which can be used to\nshow tooltip popups with custom HTML content at specific locations on the map. Properties latitude  (Number, required) Latitude of the anchor. longitude  (Number, required) Longitude of the anchor. altitude  (Number) default:  0 Altitude of the anchor. offsetLeft  (Number) default:  0 Offset of the anchor from the left in pixels, negative number indicates left. offsetTop  (Number) default:  0 Offset of the anchor from the top in pixels, negative number indicates up. closeButton  (Boolean) default:  true If  true , a close button will appear in the top right corner of the popup. closeOnClick  (Boolean) default:  true If  true , the popup will closed when the map is clicked. tipSize  (Number) default:  10 Size of the tip pointing to the coordinate. anchor  (String) default:  bottom A string indicating the popup's position relative to the coordinate.\nOptions are  top ,  bottom ,  left ,  right ,  top-left ,  top-right ,  bottom-left , and  bottom-right . dynamicPosition  (Boolean) default:  true If  true , the anchor will be dynamically adjusted to ensure the popup falls within the map container. sortByDepth  (Boolean) default:  false If  true , the order of the popups will be dynamically rearranged to ensure that the ones anchored closer to the camera are rendered on top. Useful when showing multiple popups in a tilted map. onClose  (Function) Callback when the user closes the popup. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. Styling Like its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page. Source popup.js","headings":[{"value":"Popup Control","depth":1},{"value":"Properties","depth":2},{"value":"latitude (Number, required)","depth":5},{"value":"longitude (Number, required)","depth":5},{"value":"altitude (Number)","depth":5},{"value":"offsetLeft (Number)","depth":5},{"value":"offsetTop (Number)","depth":5},{"value":"closeButton (Boolean)","depth":5},{"value":"closeOnClick (Boolean)","depth":5},{"value":"tipSize (Number)","depth":5},{"value":"anchor (String)","depth":5},{"value":"dynamicPosition (Boolean)","depth":5},{"value":"sortByDepth (Boolean)","depth":5},{"value":"onClose (Function)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/popup","title":"Popup Control"},{"excerpt":"Scale Control This is a React equivalent of Mapbox's  ScaleControl . Properties maxWidth  (Number) default:  100 The maximum length of the scale control in pixels. unit  (String) default:  'metric' Unit of the distance, one of  'imperial' ,  'metric'  or  'nautical' . Styling Like its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page. Source scale-control.js","headings":[{"value":"Scale Control","depth":1},{"value":"Properties","depth":2},{"value":"maxWidth (Number)","depth":5},{"value":"unit (String)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/scale-control","title":"Scale Control"},{"excerpt":"StaticMap The simplest  React  wrapper around  MapboxGL . This is designed to be completely\nstatic, and should be used to render a map with no interactivity. For a component\nthat supports full user interactivity, see  InteractiveMap . Properties Initialization The following props are used during the creation of the Mapbox map. attributionControl  (Boolean) default:  true Equivalent to Mapbox's  attributionControl   option . If  true , shows Mapbox's attribution control. disableTokenWarning  (Boolean) default:  false If the provided API access token is rejected by Mapbox,  StaticMap  renders a warning instead of failing silently. If you know what you are doing and want to hide this warning anyways, set this prop to  true . gl  (WebGLContext) This prop is experimental. Use an existing WebGLContext instead of creating a new one. This allows multiple libraries to render into a shared buffer. Use with caution. mapboxApiAccessToken  (String) Mapbox API access token for  MapboxGL . Required when using Mapbox vector tiles/styles\nMapbox WebGL context creation option. Useful when you want to export the canvas as a PNG mapboxApiUrl  (String) default:  https://api.mapbox.com Enables the use of private and country specific servers Mapbox servers, e.g.  https://api.mapbox.cn/ . mapOptions  (Object) default:  {} Non-public API, see  https://github.com/visgl/react-map-gl/issues/545 An object of additional options to be passed to Mapbox's  Map  constructor . Options specified here\nwill take precedence over those same options if set via props. preserveDrawingBuffer  (Boolean) default:  false Equivalent to Mapbox's  preserveDrawingBuffer   option . If  true , the map's canvas can be exported to a PNG using  map.getCanvas().toDataURL() . preventStyleDiffing  (Boolean) default:  false If  mapStyle  is assigned an Immutable object, when the prop changes,  StaticMap  can diff between the two values and call the appropriate Mapbox API such as  addLayer ,  removeLayer ,  setStyle ,  setData , etc.\nThis allows apps to update data sources and layer styles efficiently. In use cases such as animation or dynamic showing/hiding layers, style diffing prevents the map from reloading and flickering when the map style changes. There are known issues with style diffing. As stopgap, use this option to prevent style diffing. reuseMaps  (Boolean) default:  false This prop is experimental. If  true , when the map component is unmounted, instead of calling  remove  on the Mapbox map instance, save it for later reuse. This will avoid repeatedly creating new Mapbox map instances if possible. Applications that frequently mount and unmount maps may try this prop to help work around a mapbox-gl resource leak issue that can lead to a browser crash in certain situations. transformRequest  (Function) default:  null A callback run before the Map makes a request for an external URL. The callback can be used to modify the url, set headers, or set the credentials property for cross-origin requests.\nExpected to return an object with a  url  property and optionally  headers  and  credentials  properties.  Equivalent to Mapbox's  transformRequest   map option . Map State mapStyle  (String | Object | Immutable.Map) default:  'mapbox://styles/mapbox/light-v8' The Mapbox style. A string url or a\n MapboxGL style \nobject (regular JS object or Immutable.Map). Whenever the  mapStyle  prop changes, the component will attempt to update the style of the underlying Mapbox map. The behavior can be further customized with the  preventStyleDiffing  prop. mapStyle  is ignored when explicitly set to  null . width  (Number | String, required) The width of the map. Can be either a number in pixels, or a valid CSS string. height  (Number | String, required) The height of the map. Can be either a number in pixels, or a valid CSS string. latitude  (Number) The latitude of the center of the map, as a top level prop. Only used if  viewState  is not supplied. longitude  (Number) The longitude of the center of the map, as a top level prop. Only used if  viewState  is not supplied. zoom  (Number) The tile zoom level of the map, as a top level prop. Only used if  viewState  is not supplied. Bounded implicitly by default  minZoom  and  maxZoom  of  MapboxGL bearing  (Number) default:  0 Specify the bearing of the viewport, as a top level prop. Only used if  viewState  is not supplied. pitch  (Number) default:  0 Specify the pitch of the viewport, as a top level prop. Only used if  viewState  is not supplied.. altitude  (Number) default:  1.5 Non-public API, see  https://github.com/mapbox/mapbox-gl-js/issues/1137 . Altitude of the viewport camera, relative to screen height. viewState  (Object) An object containing the view state of the map specified by the following fields: latitude  (Number) - The latitude of the center of the map. longitude  (Number) - The longitude of the center of the map. zoom  (Number) - The tile zoom level of the map. Bounded implicitly by default  minZoom  and  maxZoom  of  MapboxGL . bearing  (Number) - default:  0  - The bearing of the viewport. pitch  (Number) - default:  0  - The pitch of the viewport. altitude  (Number) - default:  1.5 screen heights Note: Either the  viewState , or the  latitude ,  longitude  and  zoom  properties need to be specified. Render Options asyncRender  (Boolean) default:  false If  true , let Mapbox manage its own render cycle. This is the behavior prior to v4.1. If  false , force Mapbox canvas to redraw with DOM updates. This will make the map synchronize better with other controls during prop-driven viewport changes. style  (Object) The CSS style of the map container. visible  (Boolean) default:  true Whether the map is visible. Unmounting and re-mounting a Mapbox instance is known to be costly. This option offers a way to hide a map using CSS style. visibilityConstraints  (Object) An object that specifies bounds for viewport props with  min* ,  max*  keys. If the viewport props are outside of these constraints, the Mapbox map is automatically hidden. Default:  { minZoom: 0, maxZoom: 20, minPitch: 0, maxPitch: 60 } Callbacks onLoad  (Function) default:  () => {} A callback run when the map emits a  load  event.  Mapbox docs onResize  (Function) default:  () => {} A callback run when the map size has changed. onError  (Function) default:  console.error A callback run when the map emits an  error  event.  Mapbox docs Methods getMap Returns the Mapbox instance if initialized. The  Map  instance will have full access to  MapboxGL's API . getMap() queryRenderedFeatures Use Mapbox's  queryRenderedFeatures  API to find features at point or in a bounding box. If the  parameters  argument is not specified, only queries the layers with the  interactive  property in the layer style. queryRenderedFeatures(geometry, parameters) geometry  { [Number, Number  |  [[Number, Number, [Number, Number  - Point or an array of two points defining the bounding box. Coordinates in pixels. parameters  - Query options. For more details, see  Mapbox API documentation . FAQ Where is  fitBounds ? You can use the  WebMercatorViewport  utility to find the target viewport that fits around a lngLat bounding box: Documentation of WebMercatorViewport Source static-map.js","headings":[{"value":"StaticMap","depth":1},{"value":"Properties","depth":2},{"value":"Initialization","depth":3},{"value":"attributionControl (Boolean)","depth":5},{"value":"disableTokenWarning (Boolean)","depth":5},{"value":"gl (WebGLContext)","depth":5},{"value":"mapboxApiAccessToken (String)","depth":5},{"value":"mapboxApiUrl (String)","depth":5},{"value":"mapOptions (Object)","depth":5},{"value":"preserveDrawingBuffer (Boolean)","depth":5},{"value":"preventStyleDiffing (Boolean)","depth":5},{"value":"reuseMaps (Boolean)","depth":5},{"value":"transformRequest (Function)","depth":5},{"value":"Map State","depth":3},{"value":"mapStyle (String | Object | Immutable.Map)","depth":5},{"value":"width (Number | String, required)","depth":5},{"value":"height (Number | String, required)","depth":5},{"value":"latitude (Number)","depth":5},{"value":"longitude (Number)","depth":5},{"value":"zoom (Number)","depth":5},{"value":"bearing (Number)","depth":5},{"value":"pitch (Number)","depth":5},{"value":"altitude (Number)","depth":5},{"value":"viewState (Object)","depth":5},{"value":"Render Options","depth":3},{"value":"asyncRender (Boolean)","depth":5},{"value":"style (Object)","depth":5},{"value":"visible (Boolean)","depth":5},{"value":"visibilityConstraints (Object)","depth":5},{"value":"Callbacks","depth":3},{"value":"onLoad (Function)","depth":5},{"value":"onResize (Function)","depth":5},{"value":"onError (Function)","depth":5},{"value":"Methods","depth":2},{"value":"getMap","depth":5},{"value":"queryRenderedFeatures","depth":5},{"value":"FAQ","depth":2},{"value":"Where is fitBounds?","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/static-map","title":"StaticMap"},{"excerpt":"WebMercatorViewport The  WebMercatorViewport  class takes map camera states ( latitude ,  longitude ,  zoom ,  pitch ,  bearing  etc.),\nand performs projections between world and screen coordinates. Constructor Parameter Type Default Description width number 1 Width of viewport height number 1 Height of viewport latitude number 0 Latitude of viewport center longitude number 0 Longitude of viewport center zoom number 11 Map zoom (scale is calculated as  2^zoom ) pitch number 0 The pitch (tilt) of the map from the screen, in degrees (0 is straight down) bearing number 0 The bearing (rotation) of the map from north, in degrees counter-clockwise (0 means north is up) altitude number 1.5 Altitude of camera in screen units Remarks: Altitude has a default value that matches assumptions in mapbox-gl width  and  height  are forced to 1 if supplied as 0, to avoid\ndivision by zero. This is intended to reduce the burden of apps to\nto check values before instantiating a  Viewport . When using Mercator projection, per cartographic tradition, longitudes and\nlatitudes are specified as degrees. Methods project(lngLatZ, options) Projects latitude and longitude to pixel coordinates on screen. Parameter Type Default Description lngLatZ Array (required) map coordinates,  [lng, lat]  or  [lng, lat, Z]  where  Z  is elevation in meters options Object {} named options options.topLeft Boolean true If  true  projected coords are top left, otherwise bottom left Returns:  [x, y]  or  [x, y, z]  in pixels coordinates.  z  is pixel depth. If input is  [lng, lat] : returns  [x, y] . If input is  [lng, lat, Z] : returns  [x, y, z] . Remarks: By default, returns top-left coordinates suitable for canvas/SVG type\nrendering. unproject(xyz, options) Unproject pixel coordinates on screen to longitude and latitude on map. Parameter Type Default Description xyz Array (required) pixel coordinates,  [x, y]  or  [x, y, z]  where  z  is pixel depth options Object {} named options options.topLeft Boolean true If  true  projected coords are top left, otherwise bottom left options.targetZ number 0 If pixel depth  z  is not specified in  xyz , use  options.targetZ  as the desired elevation Returns:  [lng, lat]  or  [longitude, lat, Z]  in map coordinates.  Z  is elevation in meters. If input is  [x, y]  without specifying  options.targetZ : returns  [lng, lat] . If input is  [x, y]  with  options.targetZ : returns  [lng, lat, targetZ] . If input is  [x, y, z] : returns  [lng, lat, Z] . projectFlat(lngLat, scale) Project longitude and latitude onto Web Mercator coordinates. Parameter Type Default Description lngLat Array (required) map coordinates,  [lng, lat] scale number this.scale Web Mercator scale Returns: [x, y] , representing Web Mercator coordinates. unprojectFlat(xy, scale) Unprojects a Web Mercator coordinate to longitude and latitude. Parameter Type Default Description xy Array (required) Web Mercator coordinates,  [x, y] scale number this.scale Web Mercator scale Returns: [longitude, latitude] getBounds(options) Returns the axis-aligned bounding box of the current visible area. options.z  (number, optional) - To calculate a bounding volume for fetching 3D data, this option can be used to get the bounding box at a specific elevation. Default  0 . Returns: [[lon, lat], [lon, lat]]  as the south west and north east corners of the smallest orthogonal bounds that encompasses the visible region. getBoundingRegion(options) Returns the vertices of the current visible region. options.z  (number, optional) - To calculate a bounding volume for fetching 3D data, this option can be used to get the bounding region at a specific elevation. Default  0 . Returns: An array of 4 corners in  [longitude, latitude, altitude]  that define the visible region. fitBounds(bounds, options: object) Get a new flat viewport that fits around the given bounding box. bounds  ([ number,number , number,number ]) - an array of two opposite corners of\nthe bounding box. Each corner is specified in  [lon, lat] . options.padding  (number|{top:number, bottom: number, left: number, right: number}, optional) - The amount of\npadding in pixels to add to the given bounds from the edge of the viewport. If padding is set as object, all parameters are\nrequired. options.offset  ( number,number , optional) - The center of the given bounds relative to the viewport's center,  [x, y]  measured in pixels. getMapCenterByLngLatPosition(options: object): [number, number] Returns the map center that place a given  lng, lat  coordinate at screen point  x, y . Parameters: options.lngLat  (Array, required) -  lng,lat  coordinates of a location on the sphere. options.pos  (Array, required) -  x,y  coordinates of a pixel on screen. Returns: [longitude, latitude]  new map center","headings":[{"value":"WebMercatorViewport","depth":1},{"value":"Constructor","depth":2},{"value":"Methods","depth":2},{"value":"project(lngLatZ, options)","depth":5},{"value":"unproject(xyz, options)","depth":5},{"value":"projectFlat(lngLat, scale)","depth":5},{"value":"unprojectFlat(xy, scale)","depth":5},{"value":"getBounds(options)","depth":5},{"value":"getBoundingRegion(options)","depth":5},{"value":"fitBounds(bounds, options: object)","depth":5},{"value":"getMapCenterByLngLatPosition(options: object): [number, number]","depth":5}],"slug":"docs/api-reference/web-mercator-viewport","title":"WebMercatorViewport"},{"excerpt":"SVG Overlay Allows applications to overlay data on top of maps using a SVG container. Properties redraw  (Function) Called every time the map updates. Parameters: width  (Number) - width of the viewport height  (Number) - height of the viewport project  (Function) - get screen position  [x, y]  from geo coordinates  [lng, lat] unproject  (Function) - get geo coordinates  [lng, lat]  from screen position  [x, y] style  (Object) Additional css styles of the  svg  container. captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  false Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  (Boolean) default:  false Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  false Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. Source svg-overlay.js","headings":[{"value":"SVG Overlay","depth":1},{"value":"Properties","depth":2},{"value":"redraw (Function)","depth":5},{"value":"style (Object)","depth":3},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/svg-overlay","title":"SVG Overlay"},{"excerpt":"Source This component allows apps to create a  map source  using React. It may contain  Layer  components as children. Properties The props provided to this component should be conforming to the  Mapbox source specification or  CanvasSourceOptions . mapStyle  defaults to  mapbox://styles/mapbox/light-v8  which requires a token, to use an empty base map, you need to override the prop. See the  EMPTY_STYLE  object in the example. When props change  shallowly , the component will attempt to update the source. Do not define objects/arrays inline to avoid perf hit. Once a  <Source>  is mounted, the following props should not change. If add/remove multiple JSX sources dynamically, make sure you use React's  key prop  to give each element a stable identity. id  (String) Unique identifier of the source. If not provided, a default id will be assigned. type  (String, required) Type of the source. Source source.js","headings":[{"value":"Source","depth":1},{"value":"Properties","depth":2},{"value":"id (String)","depth":5},{"value":"type (String, required)","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/source","title":"Source"},{"excerpt":"Custom Components Marker ,\n Popup , and\n NavigationControl \nall extend the  BaseControl  React component. You may also create your own map control components. Example The following component renders a label \"(longitude, latitude)\" at the given coordinate: Properties The following properties are handled by the  BaseControl  component: captureScroll  {Boolean} - default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  {Boolean} - default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. captureClick  {Boolean} - default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  {Boolean} - default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. capturePointerMove  {Boolean} - default:  false Stop propagation of pointermove event to the map component. Can be used to stop map from calling the  onMouseMove  or  onTouchMove  callback when this component is hovered. Private Members _containerRef A React  ref  object. Should be assigned to the  ref  prop of the root DOM element of this component. Required to leverage the  capture*  props. _context An object containing the following fields: viewport  {WebMercatorViewport} - the current viewport map  {mapboxgl.Map} - the Mapbox map instance eventManager  {EventManager} - the event manager. Only available if using  InteractiveMap . isDragging  {Bool} - whether the map is being dragged. Only available if using  InteractiveMap . Private Methods _render Implement this method to render the content of this component.  this._context  is accessible when this method is called. Source base-control.js","headings":[{"value":"Custom Components","depth":1},{"value":"Example","depth":2},{"value":"Properties","depth":2},{"value":"captureScroll {Boolean} - default: false","depth":5},{"value":"captureDrag {Boolean} - default: true","depth":5},{"value":"captureClick {Boolean} - default: true","depth":5},{"value":"captureDoubleClick {Boolean} - default: true","depth":5},{"value":"capturePointerMove {Boolean} - default: false","depth":5},{"value":"Private Members","depth":2},{"value":"_containerRef","depth":5},{"value":"_context","depth":5},{"value":"Private Methods","depth":2},{"value":"_render","depth":5},{"value":"Source","depth":2}],"slug":"docs/advanced/custom-components","title":"Custom Components"},{"excerpt":"Custom Overlays Because overlays are regular React components, it's straightforward to create\nresuable overlays that others can include into their project. Overlays can access\nthe current viewport through the React  context : Here's an example of using the  ScatterplotOverlay : There are more examples in the  examples/additional-overlays  folder of this repo.","headings":[{"value":"Custom Overlays","depth":1}],"slug":"docs/advanced/custom-overlays","title":"Custom Overlays"},{"excerpt":"Marker Control This is a React equivalent of Mapbox's\n Marker Control , which can\nbe used to render custom icons at specific locations on the map. Performance notes: if a large number of markers are needed, it's generally favorable to cache the  <Marker>  nodes, so that we don't rerender them when the viewport changes. Properties latitude  (Number, required) Latitude of the marker. longitude  (Number, required) Longitude of the marker. offsetLeft  (Number) default:  0 Offset of the marker from the left in pixels, negative number indicates left. offsetTop  (Number) default:  0 Offset of the marker from the top in pixels, negative number indicates up. draggable  (Boolean) default:  false Allows this marker component to be dragged around the map. (Use  onDragEnd  to capture the final position and update  longitude  and  latitude ). onDragStart  (Function) Called when a draggable marker starts being dragged. Parameters: event  - The pointer event. event.lngLat  - The geo coordinates where the drag started, as  [lng, lat] . onDrag  (Function) Continuously called while a draggable marker is being dragged. Parameters: event  - The pointer event. event.lngLat  - The geo coordinates of the drag event, as  [lng, lat] . onDragEnd  (Function) Called when a draggable marker is released at its final position. This is usually a good time to capture  event.lngLat  and update the marker's  longitude  and  latitude  props. Parameters: event  - The pointer event. event.lngLat  - The geo coordinates where the drag ended, as  [lng, lat] . captureScroll  (Boolean) default:  false Stop propagation of mouse wheel event to the map component. Can be used to stop map from zooming when this component is scrolled. captureDrag  (Boolean) default:  true Stop propagation of dragstart event to the map component. Can be used to stop map from panning when this component is dragged. Automatically true if  draggable  is  true . captureClick  (Boolean) default:  true Stop propagation of click event to the map component. Can be used to stop map from calling the  onClick  callback when this component is clicked. captureDoubleClick  (Boolean) default:  true Stop propagation of dblclick event to the map component. Can be used to stop map from zooming when this component is double clicked. Styling Like its Mapbox counterpart, this control relies on the mapbox-gl stylesheet to work properly. Make sure to add the stylesheet to your page. Source marker.js","headings":[{"value":"Marker Control","depth":1},{"value":"Properties","depth":2},{"value":"latitude (Number, required)","depth":5},{"value":"longitude (Number, required)","depth":5},{"value":"offsetLeft (Number)","depth":5},{"value":"offsetTop (Number)","depth":5},{"value":"draggable (Boolean)","depth":5},{"value":"onDragStart (Function)","depth":5},{"value":"onDrag (Function)","depth":5},{"value":"onDragEnd (Function)","depth":5},{"value":"captureScroll (Boolean)","depth":5},{"value":"captureDrag (Boolean)","depth":5},{"value":"captureClick (Boolean)","depth":5},{"value":"captureDoubleClick (Boolean)","depth":5},{"value":"Styling","depth":2},{"value":"Source","depth":2}],"slug":"docs/api-reference/marker","title":"Marker Control"},{"excerpt":"MapController The easiest way to create a custom map control is to extend the default  MapController  class. Properties events  (Array) A list of additional event names that this control subscribes to. Available events:  click ,  dblclick ,  tap ,  doubletap ,  press ,  pinch ,  pinchin ,  pinchout ,  pinchstart ,  pinchmove ,  pinchend ,  pinchcancel ,  rotate ,  rotatestart ,  rotatemove ,  rotateend ,  rotatecancel ,  pan ,  panstart ,  panmove ,  panup ,  pandown ,  panleft ,  panright ,  panend ,  pancancel ,  swipe ,  swipeleft ,  swiperight ,  swipeup ,  swipedown ,  pointerdown ,  pointermove ,  pointerup ,  keydown , and  keyup . The following events are toggled on/off by InteractiveMap props:  scrollZoom  -  ['wheel'] dragPan  and  dragRotate  -  ['panstart', 'panmove', 'panend'] touchZoomRotate  -  ['pinchstart', 'pinchmove', 'pinchend'] doubleClickZoom  -  ['doubletap'] keyboard  -  ['keydown'] Event object is generated by  mjolnir.js . It always has the following properties: type  (string) -  The event type to which the event handler is subscribed, e.g.  'click'  or  'pointermove' center  (Object  {x, y} ) - The center of the event location (e.g. the centroid of a touch) relative to the viewport (basically,  clientX/Y ) offsetCenter  (Object  {x, y} ) - The center of the event location relative to the map. target  (Object) - The target of the event, as specified by the original  srcEvent srcEvent  (Object) - The original event object dispatched by the browser to the JS runtime Additionally, event objects for different event types contain a subset of the following properties: key  (number) - The keycode of the keyboard event leftButton  (boolean) - Flag indicating whether the left button is involved during the event middleButton  (boolean) - Flag indicating whether the middle button is involved during the event rightButton  (boolean) - Flag indicating whether the right button is involved during the event pointerType  (string) - A string indicating the type of input (e.g.  'mouse' ,  'touch' ,  'pointer' ) delta  (number) - The scroll magnitude/distance of a wheel event Methods handleEvent handleEvent(event) Called by the event manager to handle pointer events. This method delegate to the following methods to handle the default events: _onPanStart(event) _onPan(event) _onPanEnd(event) _onPinchStart(event) _onPinch(event) _onPinchEnd(event) _onDoubleTap(event) _onWheel(event) _onKeyDown(event) getMapState getMapState(overrides) Get a new descriptor object of the map state. If specified, props in the  overrides  object override the current map props. setOptions setOptions(options) Add/remove event listeners based on the latest  InteractiveMap  props. setState setState(newState) Save a persistent state (e.g. isDragging) for future use. updateViewport updateViewport(newMapState, extraProps, extraState) Invoke  onViewportChange  callback with a new map state. Source map-controller.js","headings":[{"value":"MapController","depth":1},{"value":"Properties","depth":2},{"value":"events (Array)","depth":5},{"value":"Methods","depth":2},{"value":"handleEvent","depth":5},{"value":"getMapState","depth":5},{"value":"setOptions","depth":5},{"value":"setState","depth":5},{"value":"updateViewport","depth":5},{"value":"Source","depth":2}],"slug":"docs/api-reference/map-controller","title":"MapController"},{"excerpt":"Viewport Transition react-map-gl  does not expose the transition API from  mapbox-gl-js  since it is designed to be a stateless component, and needs to synchronize with separate overlay systems such as deck.gl. Instead, transitions can be defined using  InteractiveMap 's transition props. Example: Fly to a New Location See  viewport animation  for a complete example. Example: Transition Viewport To A Bounding Box You can use the  WebMercatorViewport  utility to find the target viewport that fits around a lngLat bounding box: Documentation of WebMercatorViewport Controlling Map Transitions InteractiveMap's Transition Props See properties of  InteractiveMap . transitionDuration  (Number) transitionInterpolator  (Object) transitionEasing  (Function) transitionInterruption  (Number) onTransitionStart  (Function) onTransitionInterrupt  (Function) onTransitionEnd  (Function) Transition and the onViewportChange Callback InteractiveMap  is designed to be a stateless component. For transitions to work, the application must update the viewport props returned by the  onViewportChange  callback: Remarks: The props returned by the callback may contain transition properties. For example, during panning and rotating, the callback is invoked with  transitionDuration: 0 , meaning that the map movement instantly matches the change of the pointer. When panning or zooming with keyboard, the callback is invoked with a 300ms linear transition. It is recommended that when programatically triggering a transition, always explicitly set the transition properties (interpolator, easing and duration). \"Set and forget\": the values of the following props at the start of a transition carry through the entire duration of the transition: transitionDuration transitionInterpolator transitionEasing transitionInterruption The default interaction/transition behavior can always be intercepted and overwritten in the handler for  onViewportChange . However, if a transition is in progress, the properties that are being transitioned (e.g. longitude and latitude) should not be manipulated, otherwise the change will be interpreted as an interruption of the transition. When using  FlyToInterpolator  for  transitionInterpolator ,  transitionDuration  can be set to  'auto'  where actual duration is auto calculated based on start and end viewports and is linear to the distance between them. This duration can be further customized using  speed  parameter to  FlyToInterpolator  constructor. Transition Interpolators A  TransitionInterpolator  instance must be supplied to the  transitionInterpolator  prop. It contains the following methods: arePropsEqual(currentProps, nextProps)  - called to determine if transition should be triggered when viewport props update. initiateProps(startProps, endProps)  - called before transition starts to pre-process the start and end viewport props. interpolateProps(startProps, endProps, t)  - called to get viewport props in transition.  t  is a time factor between  [0, 1] . react-map-gl offers two built-in interpolator classes: LinearInterpolator FlyToInterpolator","headings":[{"value":"Viewport Transition","depth":1},{"value":"Example: Fly to a New Location","depth":2},{"value":"Example: Transition Viewport To A Bounding Box","depth":2},{"value":"Controlling Map Transitions","depth":2},{"value":"InteractiveMap's Transition Props","depth":3},{"value":"Transition and the onViewportChange Callback","depth":3},{"value":"Transition Interpolators","depth":3}],"slug":"docs/advanced/viewport-transition","title":"Viewport Transition"},{"excerpt":"Custom Map Controller Overriding The Default Map Controller To change the default behavior of map interaction, you can provide a custom map control to the  controller  prop of  InteractiveMap . This custom map control must offer the following interface: setOptions(options)  - called by  InteractiveMap  when props change. Documentation of  the MapController class . Examples A simple example to swap drag pan and drag rotate: Overwrite existing event handling: Listen to additional events: Add a custom callback:","headings":[{"value":"Custom Map Controller","depth":1},{"value":"Overriding The Default Map Controller","depth":2},{"value":"Examples","depth":2}],"slug":"docs/advanced/custom-map-controller","title":"Custom Map Controller"},{"excerpt":"Contributing to react-map-gl Thanks for taking the time to contribute! PRs and bug reports are welcome, and we are actively looking for new maintainers. Setting Up Dev Environment The  master  branch is the active development branch. Building react-map-gl locally from the source requires node.js  >=8 .\nWe use  yarn  to manage the dependencies. Test: Test in Node: Test in browser (can use Chrome dev tools for debugging): Pull Requests Any intended change to the code base must open a  pull request  and be approved.  Generally speaking, all PRs are open against the  master  branch, unless the feature being affected no longer exists on master. PR Checklist Tests npm run test  must be successful. New code should be covered by unit tests whenever possible. Documentation If public APIs are added/modified, update component documentation in  docs/api-reference . Breaking changes and deprecations must be added to  docs/upgrade-guide.md . Noteworthy new features should be added to  docs/whats-new.md . Description on GitHub Link to relevant issue. Label with a milestone (latest release or vNext). If public APIs are added/modified, describe the intended behavior. If visual/interaction is affected, consider attaching a screenshot/GIF. Release react-map-gl follows the  Semantic Versioning  guidelines. Steps for publishing releases can be found  here . Community Governance vis.gl is part of the  Urban Computing Foundation . See the organization's  Technical Charter . Technical Steering Committee react-map-gl development is governed by the vis.gl Technical Steering Committee (TSC). Maintainers Xiaoji Chen Xintong Xia Maintainers of react-map-gl have commit access to this GitHub repository, and take part in the decision making process. If you are interested in becoming a maintainer, read the  governance guidelines . The vis.gl TSC meets monthly and publishes meeting notes via a  mailing list .\nThis mailing list can also be utilized to reach out to the TSC. Code of Conduct Please be mindful of and adhere to the Linux Foundation's  Code of Conduct  when contributing to react-map-gl.","headings":[{"value":"Contributing to react-map-gl","depth":1},{"value":"Setting Up Dev Environment","depth":2},{"value":"Pull Requests","depth":2},{"value":"PR Checklist","depth":3},{"value":"Release","depth":2},{"value":"Community Governance","depth":2},{"value":"Technical Steering Committee","depth":3},{"value":"Maintainers","depth":3},{"value":"Code of Conduct","depth":2}],"slug":"docs/contributing","title":"Contributing to react-map-gl"}]}}}