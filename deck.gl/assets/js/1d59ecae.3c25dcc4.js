"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4212],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>k});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(o),m=r,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||l;return o?n.createElement(k,a(a({ref:t},p),{},{components:o})):n.createElement(k,a({ref:t},p))}));function k(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=o.length,a=new Array(l);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var s=2;s<l;s++)a[s]=o[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},2101:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=o(83117),r=(o(67294),o(3905));const l={},a="Styles",i={unversionedId:"api-reference/carto/styles",id:"api-reference/carto/styles",title:"Styles",description:"Helper functions to create data-driven map visualizations.",source:"@site/../docs/api-reference/carto/styles.md",sourceDirName:"api-reference/carto",slug:"/api-reference/carto/styles",permalink:"/deck.gl/docs/api-reference/carto/styles",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/styles.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VectorTileLayer",permalink:"/deck.gl/docs/api-reference/carto/vector-tile-layer"},next:{title:"@deck.gl/google-maps",permalink:"/deck.gl/docs/api-reference/google-maps/overview"}},c={},s=[{value:"colorBins",id:"colorbins",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>attr</code> (string)",id:"attr",level:4},{value:"<code>domain</code> (number[])",id:"domain",level:4},{value:"<code>colors</code> (string | Color[], optional)",id:"colors",level:4},{value:"<code>nullColor</code> (number3, optional)",id:"nullcolor",level:4},{value:"colorCategories",id:"colorcategories",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"<code>attr</code> (string)",id:"attr",level:4},{value:"<code>domain</code> (string[])",id:"domain",level:4},{value:"<code>colors</code> (string | Color[], optional)",id:"colors",level:4},{value:"<code>nullColor</code> (number3, optional)",id:"nullcolor",level:4},{value:"<code>othersColor</code> (number3, optional)",id:"otherscolor",level:4},{value:"Color Continuous",id:"color-continuous",level:2},{value:"Arguments",id:"arguments-2",level:3},{value:"<code>attr</code> (string)",id:"attr",level:4},{value:"<code>domain</code> (number[])",id:"domain",level:4},{value:"<code>colors</code> (string | Color[], optional)",id:"colors",level:4},{value:"<code>nullColor</code> (number3, optional)",id:"nullcolor",level:4}],p={toc:s},u="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"styles"},"Styles"),(0,r.kt)("p",null,"Helper functions to create data-driven map visualizations."),(0,r.kt)("p",null,"These helpers take advantage of ",(0,r.kt)("a",{parentName:"p",href:"https://carto.com/carto-colors/"},"CARTOColors"),", custom color schemes built on top of well-known standards for color use on maps, with next generation enhancements for the web and CARTO basemaps."),(0,r.kt)("h2",{id:"colorbins"},"colorBins"),(0,r.kt)("p",null,"Helper function for quickly creating a color bins style based on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/d3/d3-scale/blob/main/README.md#scaleThreshold"},"d3 scaleThreshold"),"."),(0,r.kt)("p",null,"Data values of each attribute are rounded down to the nearest value in the domain and are then styled with the corresponding color."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, gn_pop FROM populated_places',\n  getFillColor: colorBins({\n    attr: 'gn_pop',\n    domain: [1e5, 2e5, 3e5],\n    colors: 'Teal'\n  })\n});\n")),(0,r.kt)("p",null,"In this example, using ",(0,r.kt)("inlineCode",{parentName:"p"},"Teal")," of length ",(0,r.kt)("inlineCode",{parentName:"p"},"domain.length + 1"),", the range/color equivalence is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[, 1e5)     -> Teal[0]\n[1e5, 2e5)  -> Teal[1]\n[2e5, 3e5)  -> Teal[2]\n[3e5,]      -> Teal[3]\n")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"attr"},(0,r.kt)("inlineCode",{parentName:"h4"},"attr")," (string)"),(0,r.kt)("p",null,"Attribute or column to symbolize by."),(0,r.kt)("h4",{id:"domain"},(0,r.kt)("inlineCode",{parentName:"h4"},"domain")," (number[])"),(0,r.kt)("p",null,"Assign manual class break values."),(0,r.kt)("h4",{id:"colors"},(0,r.kt)("inlineCode",{parentName:"h4"},"colors")," (string | Color[], optional)"),(0,r.kt)("p",null,"Color assigned to each domain value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String: A valid named ",(0,r.kt)("a",{parentName:"li",href:"https://carto.com/carto-colors/"},"CARTOColors")," palette."),(0,r.kt)("li",{parentName:"ul"},"Array: Array of colors in RGBA ",(0,r.kt)("inlineCode",{parentName:"li"},"[ [r, g, b, [a]] ]"),". ")),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"PurpOr")),(0,r.kt)("h4",{id:"nullcolor"},(0,r.kt)("inlineCode",{parentName:"h4"},"nullColor")," (number","[3]",", optional)"),(0,r.kt)("p",null,"Color for null values."),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"[204, 204, 204]")),(0,r.kt)("h2",{id:"colorcategories"},"colorCategories"),(0,r.kt)("p",null,"Helper function for quickly creating a color category style."),(0,r.kt)("p",null,"Data values of each attribute listed in the domain are mapped one to one with corresponding colors in the range."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, type FROM ne_10m_airports',\n  getFillColor: colorCategories({\n    attr: 'type',\n    domain: ['mid', 'major', 'military mid', 'mid and military', 'major and military'],\n    colors: 'Bold'\n  })\n});\n")),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("h4",{id:"attr"},(0,r.kt)("inlineCode",{parentName:"h4"},"attr")," (string)"),(0,r.kt)("p",null,"Attribute or column to symbolize by."),(0,r.kt)("h4",{id:"domain"},(0,r.kt)("inlineCode",{parentName:"h4"},"domain")," (string[])"),(0,r.kt)("p",null,"Category list. Must be a valid list of categories."),(0,r.kt)("h4",{id:"colors"},(0,r.kt)("inlineCode",{parentName:"h4"},"colors")," (string | Color[], optional)"),(0,r.kt)("p",null,"Color assigned to each domain value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String: A valid named ",(0,r.kt)("a",{parentName:"li",href:"https://carto.com/carto-colors/"},"CARTOColors")," palette."),(0,r.kt)("li",{parentName:"ul"},"Array: Array of colors in RGBA ",(0,r.kt)("inlineCode",{parentName:"li"},"[ [r, g, b, [a]] ]"),". ")),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"PurpOr")),(0,r.kt)("h4",{id:"nullcolor"},(0,r.kt)("inlineCode",{parentName:"h4"},"nullColor")," (number","[3]",", optional)"),(0,r.kt)("p",null,"Color for null values."),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"[204, 204, 204]")),(0,r.kt)("h4",{id:"otherscolor"},(0,r.kt)("inlineCode",{parentName:"h4"},"othersColor")," (number","[3]",", optional)"),(0,r.kt)("p",null,"Fallback color for a category not correctly assigned."),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"[119, 119, 119]")),(0,r.kt)("h2",{id:"color-continuous"},"Color Continuous"),(0,r.kt)("p",null,"Helper function for quickly creating a color continuous style."),(0,r.kt)("p",null,"Data values of each field are interpolated linearly across values in the domain and are then styled with a blend of the corresponding color in the range."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, gn_pop FROM populated_places',\n  getFillColor: colorContinuous({\n    attr: 'gn_pop',\n    domain: [0, 1e5],\n    colors: 'BluYl'\n  })\n});\n")),(0,r.kt)("h3",{id:"arguments-2"},"Arguments"),(0,r.kt)("h4",{id:"attr"},(0,r.kt)("inlineCode",{parentName:"h4"},"attr")," (string)"),(0,r.kt)("p",null,"Attribute or column to symbolize by."),(0,r.kt)("h4",{id:"domain"},(0,r.kt)("inlineCode",{parentName:"h4"},"domain")," (number[])"),(0,r.kt)("p",null,"Attribute domain to define the data range."),(0,r.kt)("h4",{id:"colors"},(0,r.kt)("inlineCode",{parentName:"h4"},"colors")," (string | Color[], optional)"),(0,r.kt)("p",null,"Color assigned to each domain value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String: A valid named ",(0,r.kt)("a",{parentName:"li",href:"https://carto.com/carto-colors/"},"CARTOColors")," palette."),(0,r.kt)("li",{parentName:"ul"},"Array: Array of colors in RGBA ",(0,r.kt)("inlineCode",{parentName:"li"},"[ [r, g, b, [a]] ]"),". ")),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"PurpOr")),(0,r.kt)("h4",{id:"nullcolor"},(0,r.kt)("inlineCode",{parentName:"h4"},"nullColor")," (number","[3]",", optional)"),(0,r.kt)("p",null,"Color for null values."),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"[204, 204, 204]")))}d.isMDXComponent=!0}}]);