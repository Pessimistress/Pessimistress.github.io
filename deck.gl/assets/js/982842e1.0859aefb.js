"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3777],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(83117),r=n(67294),i=n(86010),l=n(12466),o=n(16550),s=n(91980),p=n(67392),u=n(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=null!=t?t:d(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=m(e),[l,o]=(0,r.useState)((()=>function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}const r=null!=(t=a.find((e=>e.default)))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,p]=k({queryString:n,groupId:a}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?"docusaurus.tab."+e:null}(t),[a,i]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),h=(()=>{const e=null!=s?s:d;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error("Can't select invalid tab value="+e);o(e),p(e),g(e)}),[p,g,i]),tabValues:i}}var h=n(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==o&&(d(t),s(a))},c=e=>{var t;let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{var a;const t=u.indexOf(e.currentTarget)+1;n=null!=(a=u[t])?a:u[0];break}case"ArrowLeft":{var r;const t=u.indexOf(e.currentTarget)-1;n=null!=(r=u[t])?r:u[u.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:c,onClick:m},l,{className:(0,i.Z)("tabs__item",f.tabItem,null==l?void 0:l.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function v(e){const t=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},34559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var a=n(83117),r=(n(67294),n(3905)),i=n(74866),l=n(85162);const o={},s="Animations and Transitions",p={unversionedId:"developer-guide/animations-and-transitions",id:"developer-guide/animations-and-transitions",title:"Animations and Transitions",description:"deck.gl provides several built-in animation/transition features.",source:"@site/../docs/developer-guide/animations-and-transitions.md",sourceDirName:"developer-guide",slug:"/developer-guide/animations-and-transitions",permalink:"/deck.gl/docs/developer-guide/animations-and-transitions",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/developer-guide/animations-and-transitions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Views and Projections",permalink:"/deck.gl/docs/developer-guide/views"},next:{title:"Loading Data",permalink:"/deck.gl/docs/developer-guide/loading-data"}},u={},d=[{value:"Camera Transitions",id:"camera-transitions",level:2},{value:"Camera Transition Examples",id:"camera-transition-examples",level:3},{value:"Remarks",id:"remarks",level:3},{value:"Layer Prop Transitions",id:"layer-prop-transitions",level:2},{value:"Attribute Backfilling",id:"attribute-backfilling",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Custom Animations",id:"custom-animations",level:2}],m={toc:d},c="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"animations-and-transitions"},"Animations and Transitions"),(0,r.kt)("p",null,"deck.gl provides several built-in animation/transition features."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#camera-transitions"},"Camera Transitions"))," - the camera can move smoothly from the current view state to the new view state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"#layer-prop-transitions"},"Layer Prop Transitions"))," - when a layer prop is updated, it may animate from the old value to the new value.")),(0,r.kt)("p",null,"Advanced motion effects can also be implemented using deck.gl in conjunction with other animation libraries, see the ",(0,r.kt)("a",{parentName:"p",href:"#custom-animations"},"custom animations")," section."),(0,r.kt)("h2",{id:"camera-transitions"},"Camera Transitions"),(0,r.kt)("p",null,"Camera transitions provide smooth and visually appealing transitions when ",(0,r.kt)("inlineCode",{parentName:"p"},"viewState")," change from one state to the other."),(0,r.kt)("p",null,"Transitions are performed when setting ",(0,r.kt)("inlineCode",{parentName:"p"},"Deck"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"viewState")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"initialViewState")," prop to a new value with the following additional fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"transitionInterpolator")," (object, optional, default: ",(0,r.kt)("inlineCode",{parentName:"p"},"LinearInterpolator"),") - An interpolator object that defines the transition behavior between two view states. The choices are:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/core/linear-interpolator"},"LinearInterpolator")," - a generic interpolator that works with all view types. This is the default."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/core/fly-to-interpolator"},"FlyToInterpolator"),' - a "fly to" style camera transition for geospatial views. This is pretty useful when the camera center changes by long distance.'),(0,r.kt)("li",{parentName:"ul"},"Implement a custom interpolator. See ",(0,r.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/core/transition-interpolator"},"TransitionInterpolator"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"transitionDuration")," (number | string, optional, default: 0) - Transition duration in milliseconds, default value 0, implies no transition.\nWhen using ",(0,r.kt)("inlineCode",{parentName:"p"},"FlyToInterpolator"),", it can also be set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'auto'")," where actual duration is calculated based on the distance between the start and end states, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"speed")," option.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"transitionEasing")," (Function, optional, default: ",(0,r.kt)("inlineCode",{parentName:"p"},"t => t"),') - Easing function that can be used to achieve effects like "Ease-In-Cubic", "Ease-Out-Cubic", etc. Default value performs Linear easing. (list of sample easing functions: ',(0,r.kt)("a",{parentName:"p",href:"http://easings.net/"},"http://easings.net/"),")   ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"transitionInterruption")," (number, optional, default: ",(0,r.kt)("inlineCode",{parentName:"p"},"TRANSITION_EVENTS.BREAK"),") - This field controls how to process a new view state change that occurs while performing an existing transition. This field has no impact once transition is complete. Here is the list of all possible values with resulting behavior."),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"TRANSITION_EVENTS")),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BREAK")),(0,r.kt)("td",{parentName:"tr",align:null},"Current transition will stop at the current state and next view state update is processed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SNAP_TO_END")),(0,r.kt)("td",{parentName:"tr",align:null},"Current transition will skip remaining transition steps and view state is updated to final value, transition is stopped and next view state update is processed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IGNORE")),(0,r.kt)("td",{parentName:"tr",align:null},"Any view state update is ignored until current transition is complete, this also includes view state changes due to user interaction."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onTransitionStart")," (Functional, optional) - Callback fires when requested transition starts.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onTransitionInterrupt")," (Functional, optional) - Callback fires when transition is interrupted.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onTransitionEnd")," (Functional, optional) - Callback fires when transition ends."))),(0,r.kt)("h3",{id:"camera-transition-examples"},"Camera Transition Examples"),(0,r.kt)("p",null,"This example provides ",(0,r.kt)("inlineCode",{parentName:"p"},"flyTo")," style transition to move camera from current location to the requested city."),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES = {\n  SF: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 10\n  },\n  NYC: {\n    longitude: -74.0,\n    latitude: 40.7,\n    zoom: 10\n  }\n}\n\nconst deckInstance = new Deck({\n  initialViewState: CITIES.SF,\n  controller: true\n});\n\nfor (const button of document.querySelectorAll('button')) {\n  button.onclick = () => flyToCity(button.id);\n}\n\nfunction flyToCity(name) {\n  deckInstance.setProps({\n    initialViewState: {\n      ...CITIES[name],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    }\n  })\n}\n"))),(0,r.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {Deck, MapViewState, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES: {[name: string]: MapViewState} = {\n  SF: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 10\n  },\n  NYC: {\n    longitude: -74.0,\n    latitude: 40.7,\n    zoom: 10\n  }\n}\n\nconst deckInstance = new Deck({\n  initialViewState: CITIES.SF,\n  controller: true\n});\n\nfor (const button of document.querySelectorAll('button')) {\n  (button as HTMLButtonElement).onclick = () => flyToCity(button.id);\n}\n\nfunction flyToCity(name: string) {\n  deckInstance.setProps({\n    initialViewState: {\n      ...CITIES[name],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    }\n  })\n}\n"))),(0,r.kt)(l.Z,{value:"react",label:"React",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, {useState, useCallback} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {MapViewState, FlyToInterpolator} from '@deck.gl/core';\n\nconst CITIES: {[name: string]: MapViewState} = {\n  SF: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 10\n  },\n  NYC: {\n    longitude: -74.0,\n    latitude: 40.7,\n    zoom: 10\n  }\n}\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>(CITIES.SF);\n\n  const flyToCity = useCallback(evt => {\n    setInitialViewState({\n      ...CITIES[evt.target.id],\n      transitionInterpolator: new FlyToInterpolator({speed: 2}),\n      transitionDuration: 'auto'\n    });\n  }, [])\n\n  return <>\n    <DeckGL\n      initialViewState={initialViewState}\n      controller\n    />;\n    {Object.keys(CITIES).map(name => <button id={name} onClick={flyToCity}>{name}</button>)}\n  </>;\n}\n")))),(0,r.kt)("p",null,"This example continuously rotates the camera along the Z (vertical) axis until user interrupts the rotation by dragging. It uses ",(0,r.kt)("inlineCode",{parentName:"p"},"LinearInterpolator")," and restricts transitions to ",(0,r.kt)("inlineCode",{parentName:"p"},"bearing"),". Continuous transitions are achieved by triggering new transitions upon the ",(0,r.kt)("inlineCode",{parentName:"p"},"onTransitionEnd")," callback."),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, LinearInterpolator} from '@deck.gl/core';\n\nlet initialViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12\n};\n\nconst deckInstance = new Deck({\n  initialViewState,\n  controller: true,\n  onLoad: rotateCamera\n});\n\nfunction rotateCamera() {\n  initialViewState = {\n    ...initialViewState,\n    bearing: initialViewState.bearing + 120,\n    transitionDuration: 1000,\n    transitionInterpolator: new LinearInterpolator(['bearing']),\n    onTransitionEnd: rotateCamera\n  };\n  deckInstance.setProps({initialViewState});\n}\n"))),(0,r.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {Deck, LinearInterpolator, MapViewState} from '@deck.gl/core';\n\nlet initialViewState: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12\n};\n\nconst deckInstance = new Deck({\n  initialViewState,\n  controller: true,\n  onLoad: rotateCamera\n});\n\nfunction rotateCamera(): void {\n  initialViewState = {\n    ...initialViewState,\n    bearing: initialViewState.bearing + 120,\n    transitionDuration: 1000,\n    transitionInterpolator: new LinearInterpolator(['bearing']),\n    onTransitionEnd: rotateCamera\n  };\n  deckInstance.setProps({initialViewState});\n}\n"))),(0,r.kt)(l.Z,{value:"react",label:"React",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, {useState, useCallback} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LinearInterpolator, MapViewState} from '@deck.gl/core';\n\nfunction App() {\n  const [initialViewState, setInitialViewState] = useState<MapViewState>({\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  });\n\n  const rotateCamera = useCallback(() => {\n    setInitialViewState(viewState => ({\n      ...viewState,\n      bearing: viewState.bearing + 120,\n      transitionDuration: 1000,\n      transitionInterpolator: new LinearInterpolator(['bearing']),\n      onTransitionEnd: rotateCamera\n    }));\n  }, []);\n\n  return <DeckGL\n    initialViewState={initialViewState}\n    controller\n    onLoad={rotateCamera}\n  />;\n}\n")))),(0,r.kt)("h3",{id:"remarks"},"Remarks"),(0,r.kt)("p",null,'Deck\'s view state transition model is "set and forget": the values of the following props at the start of a transition carry through the entire duration of the transition:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transitionDuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transitionInterpolator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transitionEasing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transitionInterruption"))),(0,r.kt)("p",null,"The default transition behavior can always be intercepted and overwritten in the handler for ",(0,r.kt)("inlineCode",{parentName:"p"},"onViewStateChange"),". However, if a transition is in progress, the properties that are being transitioned (e.g. longitude and latitude) should not be manipulated, otherwise the change will be interpreted as an interruption of the transition."),(0,r.kt)("h2",{id:"layer-prop-transitions"},"Layer Prop Transitions"),(0,r.kt)("p",null,"Layer properties may smoothly transition from one value to the next if a ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/layer#transitions"},"transitions")," prop is configured. There are two categories of transition-enabled props, for each enabling transition has different implications regarding performance and complexity."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Uniform prop (usually of type ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"number[]"),") transition is performed on the CPU. It only recomputes one single numeric value per update, and imposes virtually no cost on top of redrawing on each animation frame."),(0,r.kt)("li",{parentName:"ul"},"Attribute prop (usually named ",(0,r.kt)("inlineCode",{parentName:"li"},"get*"),") transition is performed on the GPU. Since it recomputes values for ",(0,r.kt)("inlineCode",{parentName:"li"},"attribute_size * data_length")," numbers, the ammount of data being updated per frame can be quite large for a big dataset. For example, animating the position of 1M point cloud involves 3M float64 or 6M float32 numbers. Performing the computation on the GPU means that they can be updated efficiently in parallel and without leaving the GPU memory. However, when such a transition is first triggered, some of the preparation is done on the CPU (specifically the ",(0,r.kt)("inlineCode",{parentName:"li"},"enter")," callback), and it could potentially be expensive. See more discussions below.")),(0,r.kt)("p",null,"To enable layer prop transitions, set the layer's ",(0,r.kt)("inlineCode",{parentName:"p"},"transitions"),' prop to an object that defines animation parameters by using the prop names as keys. The following example has the columns "grow" from the ground when data is loaded:'),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\nconst deckInstance = new Deck({\n  // ...\n  layer: getLayers(null)\n});\n\nconst resp = await fetch('/path/to/data.json');\nconst data = await resp.json();\ndeckInstance.setProps({\n  layer: getLayers(data)\n});\n\nfunction getLayers(data) {\n  return [\n    new HexagonLayer({\n      id: '3d-heatmap',\n      data,\n      getPosition: d => [d.longitude, d.latitude],\n      getElevationWeight: d => d.count,\n      extruded: true,\n      elevationScale: data && data.length ? 50 : 0,\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n}\n"))),(0,r.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {Deck} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\ntype DataType = {\n  longitude: number;\n  latitude: number;\n  count: number;\n};\n\nconst deckInstance = new Deck({\n  // ...\n  layer: getLayers(null)\n});\n\nconst resp = await fetch('/path/to/data.json');\nconst data = await resp.json() as DataType[];\ndeckInstance.setProps({\n  layer: getLayers(data)\n});\n\nfunction getLayers(data: DataType[] | null) {\n  return [\n    new HexagonLayer<DataType>({\n      id: '3d-heatmap',\n      data,\n      getPosition: (d: DataType) => [d.longitude, d.latitude],\n      getElevationWeight: (d: DataType) => d.count,\n      extruded: true,\n      elevationScale: data && data.length ? 50 : 0,\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n}\n"))),(0,r.kt)(l.Z,{value:"react",label:"React",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, {useEffect, useState} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\n\ntype DataType = {\n  longitude: number;\n  latitude: number;\n  count: number;\n};\n\nfunction App() {\n  const [data, setData] = useState<DataType[] | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch('/path/to/data.json');\n      const data = await resp.json() as DataType[];\n      setData(data);\n    })();\n  }, []);\n\n  const layers = [\n    new HexagonLayer<DataType>({\n      id: '3d-heatmap',\n      data,\n      getPosition: (d: DataType) => [d.longitude, d.latitude],\n      getElevationWeight: (d: DataType) => d.count,\n      extruded: true,\n      elevationScale: data && data.length ? 50 : 0,\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n\n  return <DeckGL\n    // ...\n    layers={layers}\n  />;\n}\n")))),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"transitions")," object, each prop name is mapped to a number or an object that is the transition setting. As a shorthand, if a prop name maps to a number, then the number is assigned to the ",(0,r.kt)("inlineCode",{parentName:"p"},"duration")," parameter with an ",(0,r.kt)("inlineCode",{parentName:"p"},"interpolation")," type transition. If an object is supplied, it may contain the following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"'interpolation'")),(0,r.kt)("td",{parentName:"tr",align:null},"Type of the transition, currently supports ",(0,r.kt)("inlineCode",{parentName:"td"},"'interpolation'")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"'spring'"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"enter")),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value => value")),(0,r.kt)("td",{parentName:"tr",align:null},'Callback to get the value that the entering vertices are transitioning from. See "attribute backfilling" below')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onStart")),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Callback when the transition is started")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onEnd")),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Callback when the transition is done")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onInterrupt")),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Callback when the transition is interrupted")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Additional fields for ",(0,r.kt)("inlineCode",{parentName:"p"},"type: 'interpolation'"),":"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"Duration of the transition animation, in milliseconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"easing")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(t: number) => number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t => t")),(0,r.kt)("td",{parentName:"tr",align:null},"Easing function that maps a value from ","[0, 1]"," to ","[0, 1]",", see ",(0,r.kt)("a",{parentName:"td",href:"http://easings.net/"},"http://easings.net/")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Additional fields for ",(0,r.kt)("inlineCode",{parentName:"p"},"type: 'spring'"),":"),(0,r.kt)("table",{parentName:"li"},(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stiffness")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.05")),(0,r.kt)("td",{parentName:"tr",align:null},'"Tension" factor for the spring')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"damping")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.5")),(0,r.kt)("td",{parentName:"tr",align:null},'"Friction" factor that counteracts the spring\'s acceleration')))))),(0,r.kt)("h3",{id:"attribute-backfilling"},"Attribute Backfilling"),(0,r.kt)("p",null,"Consider the following setup, a ",(0,r.kt)("inlineCode",{parentName:"p"},"ScatterplotLayer")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"transitions")," enabled for positions and fill colors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {ScatterplotLayer} from '@deck.gl/layers';\nimport type {Color} from '@deck.gl/core';\n\nnew ScatterplotLayer({\n  // ...\n  transitions: {\n    getPosition: {\n      type: 'spring',\n      damping: 0.2\n    },\n    getFillColor: {\n      duration: 600,\n      easing: (x: number) => -(Math.cos(Math.PI * x) - 1) / 2, // ease-in-out-sine\n      entry: ([r, g, b]: Color) => [r, g, b, 0]\n    }\n  }\n});\n")),(0,r.kt)("p",null,"When the layer's data updates from 3 elements to 4 elements, positions and colors also changed:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Object index"),(0,r.kt)("th",{parentName:"tr",align:null},"Old ",(0,r.kt)("inlineCode",{parentName:"th"},"getPosition")," result"),(0,r.kt)("th",{parentName:"tr",align:null},"New ",(0,r.kt)("inlineCode",{parentName:"th"},"getPosition")," result"),(0,r.kt)("th",{parentName:"tr",align:null},"Old ",(0,r.kt)("inlineCode",{parentName:"th"},"getFillColor")," result"),(0,r.kt)("th",{parentName:"tr",align:null},"New ",(0,r.kt)("inlineCode",{parentName:"th"},"getFillColor")," result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 0, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 3, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"[255, 0, 0, 255]"),(0,r.kt)("td",{parentName:"tr",align:null},"[255, 255, 0, 255]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"[1, 0, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 0, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 255, 0, 255]"),(0,r.kt)("td",{parentName:"tr",align:null},"[255, 0, 0, 255]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"[2, 0, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"[1, 0, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 0, 255, 255]"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 255, 0, 255]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"[2, 0, 0]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"[0, 0, 255, 255]")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For index 0-2, transitions are performed from the old values to the new values at the same index. "),(0,r.kt)("li",{parentName:"ul"},"Because the new data is larger, ",(0,r.kt)("inlineCode",{parentName:"li"},"enter"),' callback is called at index 3 to backfill the position and color to transition from. The first argument is the "to" value. For position, the default ',(0,r.kt)("inlineCode",{parentName:"li"},"enter")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[2, 0, 0]")," (same value), which will look like the new circle just appeared in place. For color, the user-supplied ",(0,r.kt)("inlineCode",{parentName:"li"},"enter")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[0, 0, 255, 0]")," (same RGB and alpha=0), which will look like the new circle faded in.")),(0,r.kt)("p",null,"When working with variable-length geometries, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"PathLayer")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PolygonLayer"),", transitions are handled per geometry (path or polygon). For each geometry, transitions are performed between the old and new values at the same vertex index. If the new path/polygon has more vertices, ",(0,r.kt)("inlineCode",{parentName:"p"},"enter"),' is called to backfill the "from" value. In this case, ',(0,r.kt)("inlineCode",{parentName:"p"},"enter")," also receives a second argument ",(0,r.kt)("inlineCode",{parentName:"p"},"fromChunk"),' representing the "from" value of the entire geometry.'),(0,r.kt)("p",null,"The process of attribute backfilling may be expensive performance-wise because it calls ",(0,r.kt)("inlineCode",{parentName:"p"},"enter")," for each index on the CPU, then upload the new data to the GPU. It only happens when data size/vertex count is growing."),(0,r.kt)("h3",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"Between updates, objects are identified by their index in the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," array. This means that if objects are inserted or removed, the transition will not look as expected. There is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/issues/2570"},"an open feature request")," for supporting custom object id."),(0,r.kt)("h2",{id:"custom-animations"},"Custom Animations"),(0,r.kt)("p",null,"The most powerful way to create animations with deck.gl is to manage data and settings externally, and update the layers' props on every frame."),(0,r.kt)("p",null,"The following example shows the ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/geo-layers/trips-layer"},"TripsLayer"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"currentTime")," prop animated by the ",(0,r.kt)("a",{parentName:"p",href:"https://popmotion.io/"},"popmotion")," library:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {animate} from \"popmotion\";\n\nconst currentTimeAnimation = animate({\n  from: 0, // currentTime min value\n  to: 1800, // currentTime max value\n  duration: 5000, // over the course of 5 seconds\n  repeat: Infinity,\n  onUpdate: updateLayers\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true\n});\n\nfunction updateLayers(currentTime) {\n  const layers = [\n    new TripsLayer({\n      id: 'TripsLayer',\n      data: '/path/to/data.json',\n      getPath: d => d.waypoints.map(p => p.coordinates),\n      getTimestamps: d => d.waypoints.map(p => p.timestamp),\n      getColor: [253, 128, 93],\n      getWidth: 50,\n\n      currentTime,\n      trailLength: 600\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n"))),(0,r.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {Deck} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {animate} from \"popmotion\";\n\nconst currentTimeAnimation = animate<number>({\n  from: 0, // currentTime min value\n  to: 1800, // currentTime max value\n  duration: 5000, // over the course of 5 seconds\n  repeat: Infinity,\n  onUpdate: updateLayers\n});\n\nconst deckInstance = new Deck({\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true\n});\n\ntype TripData = {\n  coordinates: [longitude: number, latitude: number][];\n  timestamps: number[];\n};\n\nfunction updateLayers(currentTime: number) {\n  const layers = [\n    new TripsLayer<TripData>({\n      id: 'TripsLayer',\n      data: '/path/to/data.json',\n      getPath: (d: TripData) => d.waypoints.map(p => p.coordinates),\n      getTimestamps: (d: TripData) => d.waypoints.map(p => p.timestamp),\n      getColor: [253, 128, 93],\n      getWidth: 50,\n\n      currentTime,\n      trailLength: 600\n    })\n  ];\n\n  deckInstance.setProps({layers});\n}\n"))),(0,r.kt)(l.Z,{value:"react",label:"React",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, {useState, useEffect} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {MapViewState} from '@deck.gl/core';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {animate} from \"popmotion\";\n\nconst INITIAL_VIEW_STATE: MapViewState = {\n  longitude: -122.4,\n  latitude: 37.8,\n  zoom: 12\n};\n\ntype TripData = {\n  coordinates: [longitude: number, latitude: number][];\n  timestamps: number[];\n};\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState<number>(0);\n\n  useEffect(() => {\n    const currentTimeAnimation = animate<number>({\n      from: 0, // currentTime min value\n      to: 1800, // currentTime max value\n      duration: 5000, // over the course of 5 seconds\n      repeat: Infinity,\n      onUpdate: setCurrentTime\n    });\n    return () => currentTimeAnimation.stop();\n  });\n\n  const layers = [\n    new TripsLayer<TripData>({\n      id: 'TripsLayer',\n      data: '/path/to/data.json',\n      getPath: (d: TripData) => d.waypoints.map(p => p.coordinates),\n      getTimestamps: (d: TripData) => d.waypoints.map(p => p.timestamp),\n      getColor: [253, 128, 93],\n      getWidth: 50,\n\n      currentTime,\n      trailLength: 600\n    })\n  ];\n\n  return <DeckGL\n    initialViewState={INITIAL_VIEW_STATE}\n    controller\n    layers={layers}\n  />;\n}\n")))),(0,r.kt)("p",null,"Deck.gl is designed to handle layer updates very efficiently at high frame rate. An example of this kind of application is ",(0,r.kt)("a",{parentName:"p",href:"https://avs.auto"},"autonomous vehicle visualization"),", where car pose, LIDAR point clouds, camera imagery, as well as geometries outlining perception, prediction and planning decisions are streamed in from a server many times a second. The ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/performance"},"performance guide")," describes various techniques in optimizing for large datasets and frequent updates."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://hubble.gl/"},"hubble.gl"),", a project by the vis.gl community, implements comprehensive keyframe-controlled animation of deck.gl layers for interactive storytelling and/or render to video."))}k.isMDXComponent=!0}}]);